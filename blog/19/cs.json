{
    "trans": "<p class=\"text-gray-700 italic mb-4\">Hloubkový průvodce vytvořením vlastní kalkulačky interaktivní geometrie pomocí JavaScriptu, kompletní s výpočty oblasti pro jednoduché a složité polygony.</p>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Úvod: Proč sestavit kalkulačku geometrie?</h2>        <p class=\"mb-4\">Výpočty geometrie tvoří základ četných aplikací v reálném světě-od průzkumu půdy a architektury po vývoj her a geografické informační systémy.Jako vývojáři často potřebujeme spolehlivé nástroje pro výpočet oblastí různých tvarů.I když je k dispozici mnoho online kalkulaček, vytvoření vlastních nabídek několik výhod:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Úplné přizpůsobení, aby vyhovovalo vašim konkrétním požadavkům na projekt</li>          <li class=\"mb-2\">Flexibilita integrace s vašimi stávajícími webovými aplikacemi</li>          <li class=\"mb-2\">Naučit příležitost porozumět koordinaci geometrie a algoritmického myšlení</li>          <li class=\"mb-2\">Vylepšení portfolia pro předvedení vašich dovedností JavaScriptu</li>      </ol>        <p class=\"mb-4\">V tomto komplexním tutoriálu projdeme procesem budování výkonné, interaktivní kalkulačky oblasti geometrie pomocí JavaScriptu.Nakonec budete mít plně funkční webovou aplikaci, která přesně vypočítá oblast jednoduchých i komplexních polygonů pomocí geometrie souřadnic.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Co budeme postavit</h2>        <p class=\"mb-4\">Naše kalkulačka geometrie bude:</p>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Umožněte uživatelům zadávat souřadnice polygonu prostřednictvím intuitivního rozhraní</li>          <li class=\"mb-2\">Vypočítejte oblasti pro pravidelné i nepravidelné polygony</li>          <li class=\"mb-2\">Podporujte více měřicích jednotek</li>          <li class=\"mb-2\">Vizualizujte tvary pomocí plátna HTML</li>          <li class=\"mb-2\">Poskytněte jasné a přesné výsledky se správným zaokrouhlením</li>          <li class=\"mb-2\">Pracujte ve všech hlavních prohlížečích a zařízeních</li>      </ul>        <img src=\"https://static.calculators.im/upload/image/19/image-1.jpg\"          alt=\"Geometry Area Calculator Interface\" class=\"w-full rounded-lg shadow-md mb-4\" loading=\"lazy\" width=\"1200\"          height=\"1200\">        <p class=\"text-sm text-gray-600 italic mb-6\">Náhled naší finální kalkulačky geometrie JavaScriptu s interaktivním vstupem polygonu</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Předpoklady</h2>        <p class=\"mb-4\">Chcete -li sledovat tento tutoriál, měli byste mít:</p>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Základní porozumění HTML, CSS a Javascriptu</li>          <li class=\"mb-2\">Znalost manipulace s DOM</li>          <li class=\"mb-2\">Textový editor nebo IDE (vs kód, vznešený text atd.)</li>          <li class=\"mb-2\">Moderní webový prohlížeč</li>          <li class=\"mb-2\">Volitelné: Porozumění základům souřadnic geometrie</li>      </ul>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Pochopení matematiky za výpočty oblasti</h2>        <p class=\"mb-4\">Než se ponoříme do kódu, pochopte matematické principy, které pohánějí naši kalkulačku geometrie.</p>        <h3 class=\"text-xl font-semibold mb-4\">Vzorec tkaničky pro oblast polygonu</h3>        <p class=\"mb-4\">Pro výpočet oblasti jakéhokoli polygonu (pravidelného nebo nepravidelného) použijeme vzorec trýze, známý také jako vzorec inspektora nebo Gaussova vzorec.Tento výkonný algoritmus pracuje pro jakýkoli polygon definovaný jeho vrcholy, bez ohledu na to, jak složitý může být tvar.</p>        <p class=\"mb-4\">Vzorec je vyjádřen jako:</p>        <div class=\"bg-gray-100 p-4 rounded-lg mb-6\">          <code>Area = 0.5 * |∑(x_i * y_(i+1) - x_(i+1) * y_i)|</code>      </div>        <p class=\"mb-4\">Kde:</p>      <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\"><code>x_i</code> and <code>y_i</code> are the coordinates of the i-th vertex</li>          <li class=\"mb-2\">Vzorec počítá polovinu součtu křížových produktů sousedních vrcholů</li>          <li class=\"mb-2\">Absolutní hodnota zajišťuje pozitivní oblast</li>      </ul>        <p class=\"mb-4\">Tento vzorec funguje „chůzí“ po obvodu polygonu a vypočítává křížové produkty mezi po sobě jdoucími body.Když je shrneme a rozdělíme na 2, dostaneme oblast polygonu.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Nastavení projektu</h2>        <p class=\"mb-4\">Začněme nastavením základní struktury naší kalkulačky geometrie:</p>        <h3 class=\"text-xl font-semibold mb-4\">Struktura HTML</h3>        <p class=\"mb-4\">Create a new file named <code>index.html</code> with the following structure:</p>        <pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;  &lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;      &lt;meta charset=&quot;UTF-8&quot;&gt;      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;      &lt;title&gt;Geometry Area Calculator&lt;/title&gt;      &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;  &lt;/head&gt;  &lt;body&gt;      &lt;div class=&quot;calculator-container&quot;&gt;          &lt;h1&gt;Geometry Area Calculator&lt;/h1&gt;                    &lt;div class=&quot;input-section&quot;&gt;              &lt;h2&gt;Enter Polygon Coordinates&lt;/h2&gt;              &lt;p&gt;Click on the canvas to add points or enter them manually below.&lt;/p&gt;                            &lt;div class=&quot;canvas-container&quot;&gt;                  &lt;canvas id=&quot;polygon-canvas&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;                  &lt;button id=&quot;clear-canvas&quot;&gt;Clear Canvas&lt;/button&gt;              &lt;/div&gt;                            &lt;div class=&quot;manual-input&quot;&gt;                  &lt;div class=&quot;coordinates-container&quot; id=&quot;coordinates-list&quot;&gt;                      &lt;div class=&quot;coordinate-pair&quot;&gt;                          &lt;input type=&quot;number&quot; placeholder=&quot;X1&quot; class=&quot;x-coord&quot;&gt;                          &lt;input type=&quot;number&quot; placeholder=&quot;Y1&quot; class=&quot;y-coord&quot;&gt;                          &lt;button class=&quot;remove-point&quot;&gt;×&lt;/button&gt;                      &lt;/div&gt;                  &lt;/div&gt;                  &lt;button id=&quot;add-point&quot;&gt;Add Point&lt;/button&gt;              &lt;/div&gt;                            &lt;div class=&quot;units-selection&quot;&gt;                  &lt;label for=&quot;units&quot;&gt;Measurement Units:&lt;/label&gt;                  &lt;select id=&quot;units&quot;&gt;                      &lt;option value=&quot;pixels&quot;&gt;Pixels&lt;/option&gt;                      &lt;option value=&quot;meters&quot;&gt;Meters&lt;/option&gt;                      &lt;option value=&quot;feet&quot;&gt;Feet&lt;/option&gt;                  &lt;/select&gt;              &lt;/div&gt;                            &lt;button id=&quot;calculate-area&quot;&gt;Calculate Area&lt;/button&gt;          &lt;/div&gt;                    &lt;div class=&quot;results-section&quot; id=&quot;results&quot;&gt;              &lt;!-- Results will be displayed here --&gt;          &lt;/div&gt;      &lt;/div&gt;            &lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;  &lt;/body&gt;  &lt;/html&gt;</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">Styl CSS</h3>        <p class=\"mb-4\">Create a file named <code>styles.css</code> for styling our calculator:</p>        <pre><code class=\"language-css\">* {      box-sizing: border-box;      margin: 0;      padding: 0;      font-family: &#x27;Segoe UI&#x27;, Tahoma, Geneva, Verdana, sans-serif;  }    body {      background-color: #f5f5f5;      padding: 20px;  }    .calculator-container {      max-width: 800px;      margin: 0 auto;      background-color: white;      padding: 30px;      border-radius: 10px;      box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);  }    h1 {      text-align: center;      color: #333;      margin-bottom: 30px;  }    h2 {      font-size: 1.5rem;      margin-bottom: 15px;      color: #444;  }    p {      margin-bottom: 20px;      color: #666;  }    .canvas-container {      margin-bottom: 30px;      text-align: center;  }    canvas {      border: 1px solid #ccc;      background-color: #f9f9f9;  }    .manual-input {      margin-bottom: 25px;  }    .coordinates-container {      max-height: 200px;      overflow-y: auto;      margin-bottom: 15px;  }    .coordinate-pair {      display: flex;      margin-bottom: 8px;      align-items: center;  }    input {      width: 80px;      padding: 8px;      margin-right: 10px;      border: 1px solid #ccc;      border-radius: 4px;  }    button {      padding: 8px 15px;      background-color: #4CAF50;      color: white;      border: none;      border-radius: 4px;      cursor: pointer;      transition: background-color 0.3s;  }    button:hover {      background-color: #45a049;  }    .remove-point {      background-color: #f44336;      padding: 8px 12px;  }    .remove-point:hover {      background-color: #d32f2f;  }    #clear-canvas {      margin-top: 10px;  }    .units-selection {      margin-bottom: 25px;  }    select {      padding: 8px;      border: 1px solid #ccc;      border-radius: 4px;  }    .results-section {      margin-top: 30px;      padding: 20px;      background-color: #f0f8ff;      border-radius: 6px;      display: none;  }    .results-section.active {      display: block;  }    .area-result {      font-size: 1.3rem;      margin-bottom: 15px;  }    .calculation-steps {      margin-top: 20px;      padding: 15px;      background-color: #f5f5f5;      border-radius: 4px;      font-family: monospace;  }</code></pre>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Implementace JavaScriptu</h2>        <p class=\"mb-4\">Now, let's create the <code>script.js</code> file that will power our <strong>geometry area              calculator</strong>:</p>        <pre><code class=\"language-javascript\">// DOM Elements  const canvas = document.getElementById(&#x27;polygon-canvas&#x27;);  const ctx = canvas.getContext(&#x27;2d&#x27;);  const clearCanvasBtn = document.getElementById(&#x27;clear-canvas&#x27;);  const addPointBtn = document.getElementById(&#x27;add-point&#x27;);  const coordinatesList = document.getElementById(&#x27;coordinates-list&#x27;);  const calculateBtn = document.getElementById(&#x27;calculate-area&#x27;);  const resultsSection = document.getElementById(&#x27;results&#x27;);  const unitsSelect = document.getElementById(&#x27;units&#x27;);    // Global Variables  let points = [];  let isDragging = false;  let dragIndex = -1;    // Canvas Setup  function setupCanvas() {      // Set canvas coordinate system (origin at center)      ctx.translate(canvas.width / 2, canvas.height / 2);      drawGrid();            // Event listeners for canvas interaction      canvas.addEventListener(&#x27;mousedown&#x27;, handleMouseDown);      canvas.addEventListener(&#x27;mousemove&#x27;, handleMouseMove);      canvas.addEventListener(&#x27;mouseup&#x27;, () =&gt; isDragging = false);            // Redraw canvas initially      redrawCanvas();  }    // Draw coordinate grid  function drawGrid() {      const width = canvas.width;      const height = canvas.height;            ctx.strokeStyle = &#x27;#e0e0e0&#x27;;      ctx.lineWidth = 1;            // Vertical lines      for (let x = -width/2; x &lt;= width/2; x += 20) {          ctx.beginPath();          ctx.moveTo(x, -height/2);          ctx.lineTo(x, height/2);          ctx.stroke();      }            // Horizontal lines      for (let y = -height/2; y &lt;= height/2; y += 20) {          ctx.beginPath();          ctx.moveTo(-width/2, y);          ctx.lineTo(width/2, y);          ctx.stroke();      }            // X and Y axes (darker)      ctx.strokeStyle = &#x27;#aaa&#x27;;      ctx.lineWidth = 2;            // X-axis      ctx.beginPath();      ctx.moveTo(-width/2, 0);      ctx.lineTo(width/2, 0);      ctx.stroke();            // Y-axis      ctx.beginPath();      ctx.moveTo(0, -height/2);      ctx.lineTo(0, height/2);      ctx.stroke();  }    // Handle mouse down event on canvas  function handleMouseDown(e) {      const rect = canvas.getBoundingClientRect();      const scaleX = canvas.width / rect.width;      const scaleY = canvas.height / rect.height;            const canvasX = (e.clientX - rect.left) * scaleX - canvas.width / 2;      const canvasY = (e.clientY - rect.top) * scaleY - canvas.height / 2;            // Check if clicking near an existing point (for dragging)      for (let i = 0; i &lt; points.length; i++) {          const dx = points[i].x - canvasX;          const dy = points[i].y - canvasY;          const distance = Math.sqrt(dx * dx + dy * dy);                    if (distance &lt; 10) {              isDragging = true;              dragIndex = i;              return;          }      }            // If not dragging, add a new point      points.push({x: canvasX, y: canvasY});      updateCoordinateInputs();      redrawCanvas();  }    // Handle mouse move event on canvas  function handleMouseMove(e) {      if (!isDragging || dragIndex === -1) return;            const rect = canvas.getBoundingClientRect();      const scaleX = canvas.width / rect.width;      const scaleY = canvas.height / rect.height;            const canvasX = (e.clientX - rect.left) * scaleX - canvas.width / 2;      const canvasY = (e.clientY - rect.top) * scaleY - canvas.height / 2;            points[dragIndex] = {x: canvasX, y: canvasY};      updateCoordinateInputs();      redrawCanvas();  }    // Redraw the canvas with all points and connections  function redrawCanvas() {      // Clear the canvas      ctx.clearRect(-canvas.width/2, -canvas.height/2, canvas.width, canvas.height);            // Redraw the grid      drawGrid();            if (points.length === 0) return;            // Draw the polygon      ctx.beginPath();      ctx.moveTo(points[0].x, points[0].y);            for (let i = 1; i &lt; points.length; i++) {          ctx.lineTo(points[i].x, points[i].y);      }            // Connect back to the first point if we have at least 3 points      if (points.length &gt;= 3) {          ctx.lineTo(points[0].x, points[0].y);                    // Fill the polygon with a semi-transparent color          ctx.fillStyle = &#x27;rgba(76, 175, 80, 0.2)&#x27;;          ctx.fill();      }            // Draw the polygon outline      ctx.strokeStyle = &#x27;#4CAF50&#x27;;      ctx.lineWidth = 2;      ctx.stroke();            // Draw the points      for (let i = 0; i &lt; points.length; i++) {          ctx.beginPath();          ctx.arc(points[i].x, points[i].y, 5, 0, Math.PI * 2);          ctx.fillStyle = &#x27;#4CAF50&#x27;;          ctx.fill();                    // Label the points          ctx.fillStyle = &#x27;#333&#x27;;          ctx.font = &#x27;12px Arial&#x27;;          ctx.fillText(`P${i+1}`, points[i].x + 8, points[i].y - 8);      }  }    // Update the coordinate inputs based on canvas points  function updateCoordinateInputs() {      // Clear all existing inputs      coordinatesList.innerHTML = &#x27;&#x27;;            // Add new inputs for each point      for (let i = 0; i &lt; points.length; i++) {          const pair = document.createElement(&#x27;div&#x27;);          pair.className = &#x27;coordinate-pair&#x27;;                    const xInput = document.createElement(&#x27;input&#x27;);          xInput.type = &#x27;number&#x27;;          xInput.className = &#x27;x-coord&#x27;;          xInput.placeholder = `X${i+1}`;          xInput.value = Math.round(points[i].x);          xInput.dataset.index = i;                    const yInput = document.createElement(&#x27;input&#x27;);          yInput.type = &#x27;number&#x27;;          yInput.className = &#x27;y-coord&#x27;;          yInput.placeholder = `Y${i+1}`;          yInput.value = Math.round(points[i].y);          yInput.dataset.index = i;                    const removeBtn = document.createElement(&#x27;button&#x27;);          removeBtn.className = &#x27;remove-point&#x27;;          removeBtn.textContent = &#x27;×&#x27;;          removeBtn.dataset.index = i;                    pair.appendChild(xInput);          pair.appendChild(yInput);          pair.appendChild(removeBtn);          coordinatesList.appendChild(pair);                    // Event listeners for manual input changes          xInput.addEventListener(&#x27;change&#x27;, updatePointFromInput);          yInput.addEventListener(&#x27;change&#x27;, updatePointFromInput);          removeBtn.addEventListener(&#x27;click&#x27;, removePoint);      }  }    // Update a point from manual input  function updatePointFromInput(e) {      const index = parseInt(e.target.dataset.index);      const value = parseFloat(e.target.value);            if (isNaN(value)) return;            if (e.target.className === &#x27;x-coord&#x27;) {          points[index].x = value;      } else {          points[index].y = value;      }            redrawCanvas();  }    // Remove a point  function removePoint(e) {      const index = parseInt(e.target.dataset.index);      points.splice(index, 1);      updateCoordinateInputs();      redrawCanvas();  }    // Add a new point via button  function addNewPoint() {      // Add a new point at (0, 0) or near the last point if one exists      if (points.length &gt; 0) {          const lastPoint = points[points.length - 1];          points.push({x: lastPoint.x + 20, y: lastPoint.y + 20});      } else {          points.push({x: 0, y: 0});      }            updateCoordinateInputs();      redrawCanvas();  }    // Clear all points  function clearCanvas() {      points = [];      updateCoordinateInputs();      redrawCanvas();      resultsSection.style.display = &#x27;none&#x27;;  }    // Calculate area using the Shoelace formula  function calculatePolygonArea(vertices) {      if (vertices.length &lt; 3) return 0;            let area = 0;      const n = vertices.length;            for (let i = 0; i &lt; n; i++) {          const j = (i + 1) % n;          area += vertices[i].x * vertices[j].y;          area -= vertices[j].x * vertices[i].y;      }            return Math.abs(area / 2);  }    // Display the calculation results  function displayResults() {      if (points.length &lt; 3) {          alert(&quot;You need at least 3 points to calculate area.&quot;);          return;      }            const area = calculatePolygonArea(points);      const selectedUnit = unitsSelect.value;            let unitSymbol = &#x27;px²&#x27;;      let convertedArea = area;            // Apply unit conversions if needed      if (selectedUnit === &#x27;meters&#x27;) {          unitSymbol = &#x27;m²&#x27;;          // Assuming 1 pixel = 0.01 meter for example          convertedArea = area * 0.0001;      } else if (selectedUnit === &#x27;feet&#x27;) {          unitSymbol = &#x27;ft²&#x27;;          // Assuming 1 pixel = 0.0328 feet          convertedArea = area * 0.001;      }            // Format the result      const formattedArea = convertedArea.toFixed(2);            // Create the result HTML      let resultHTML = `          &lt;h2&gt;Calculation Results&lt;/h2&gt;          &lt;div class=&quot;area-result&quot;&gt;              &lt;strong&gt;Polygon Area:&lt;/strong&gt; ${formattedArea} ${unitSymbol}          &lt;/div&gt;          &lt;p&gt;Based on ${points.length} vertices&lt;/p&gt;                    &lt;div class=&quot;calculation-steps&quot;&gt;              &lt;h3&gt;Calculation Steps:&lt;/h3&gt;              &lt;p&gt;Using the Shoelace formula: A = 0.5 × |∑(xᵢyᵢ₊₁ − xᵢ₊₁yᵢ)|&lt;/p&gt;              &lt;ol&gt;      `;            // Add the calculation steps      for (let i = 0; i &lt; points.length; i++) {          const j = (i + 1) % points.length;          const term = (points[i].x * points[j].y - points[j].x * points[i].y).toFixed(2);          resultHTML += `&lt;li&gt;Step ${i+1}: (${points[i].x} × ${points[j].y}) - (${points[j].x} × ${points[i].y}) = ${term}&lt;/li&gt;`;      }            resultHTML += `              &lt;/ol&gt;              &lt;p&gt;Summing all steps and taking absolute value: ${Math.abs(area).toFixed(2)}&lt;/p&gt;              &lt;p&gt;Dividing by 2: ${(Math.abs(area)/2).toFixed(2)}&lt;/p&gt;          &lt;/div&gt;      `;            resultsSection.innerHTML = resultHTML;      resultsSection.style.display = &#x27;block&#x27;;      resultsSection.scrollIntoView({ behavior: &#x27;smooth&#x27; });  }    // Initialize the application  function init() {      setupCanvas();            // Event listeners      clearCanvasBtn.addEventListener(&#x27;click&#x27;, clearCanvas);      addPointBtn.addEventListener(&#x27;click&#x27;, addNewPoint);      calculateBtn.addEventListener(&#x27;click&#x27;, displayResults);  }    // Start the app when the page loads  window.addEventListener(&#x27;load&#x27;, init);</code></pre>        <img src=\"https://static.calculators.im/upload/image/19/image-2.jpg\"          alt=\"Polygon Area Calculation with Shoelace Formula\" class=\"w-full rounded-lg shadow-md mb-4\" loading=\"lazy\"          width=\"1200\" height=\"1200\">        <p class=\"text-sm text-gray-600 italic mb-6\">Vizuální reprezentace toho, jak vzorec tkanic počítá oblast polygonu</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Porozumění klíčovým komponentám</h2>        <p class=\"mb-4\">Pojďme rozebrat hlavní komponenty naší kalkulačky oblasti geometrie:</p>        <h3 class=\"text-xl font-semibold mb-4\">Interakce plátna</h3>        <p class=\"mb-4\">Naše kalkulačka používá prvek plátna HTML pro interaktivní tvorbu polygonů.Uživatelé mohou:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Kliknutím na plátno přidejte body</li>          <li class=\"mb-2\">Přetáhněte stávající body a upravte pozice</li>          <li class=\"mb-2\">Viz vizualizace polygonu v reálném čase</li>          <li class=\"mb-2\">Zobrazit souřadnicovou mřížku pro informaci</li>      </ol>        <p class=\"mb-4\">Na plátně je nastaveno souřadnicový systém, kde je (0,0) ve středu, takže je pro uživatele intuitivní pracovat s pozitivními i negativními souřadnicemi.</p>        <h3 class=\"text-xl font-semibold mb-4\">Správa vstupů souřadnic</h3>        <p class=\"mb-4\">Uživatelé mohou zadávat souřadnice dvěma způsoby:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Vizuální vstup: Klikněte přímo na plátno a umístíte body</li>          <li class=\"mb-2\">Manuální vstup: Zadejte přesné souřadnice ve vstupních polích</li>      </ol>        <p class=\"mb-4\">Dvě vstupní metody jsou synchronizovány, což umožňuje intuitivní vizuální umístění a přesný numerický vstup.</p>        <h3 class=\"text-xl font-semibold mb-4\">Implementace algoritmu chločení</h3>        <p class=\"mb-4\">Jádrem naší kalkulačky je implementace vzorce boku:</p>        <pre><code class=\"language-javascript\">function calculatePolygonArea(vertices) {      if (vertices.length &lt; 3) return 0;            let area = 0;      const n = vertices.length;            for (let i = 0; i &lt; n; i++) {          const j = (i + 1) % n;          area += vertices[i].x * vertices[j].y;          area -= vertices[j].x * vertices[i].y;      }            return Math.abs(area / 2);  }</code></pre>        <p class=\"mb-4\">Tato funkce:</p>      <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Přijímá řadu souřadnic vrcholů</li>          <li class=\"mb-2\">Smyčky každým bodem a dalším bodem (obalení do prvního bodu)</li>          <li class=\"mb-2\">Aplikuje výpočet křížového produktu</li>          <li class=\"mb-2\">Má absolutní hodnotu a dělí se o 2, aby získala konečnou oblast</li>      </ol>        <p class=\"mb-4\">Krása tohoto algoritmu spočívá v tom, že funguje pro jakýkoli polygon, bez ohledu na to, zda je to konvexní nebo konkávní, pokud se protíná.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Přidání pokročilých funkcí</h2>        <p class=\"mb-4\">Nyní, když máme základní kalkulačku, pojďme na rozšíření některých pokročilých funkcí:</p>        <h3 class=\"text-xl font-semibold mb-4\">Převod jednotky</h3>        <p class=\"mb-4\">Naše kalkulačka podporuje různé jednotky měření:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Pixely: Pro měření založená na obrazovce</li>          <li class=\"mb-2\">Měřiče: Pro měření metriky v reálném světě</li>          <li class=\"mb-2\">Nohy: Pro císařská měření</li>      </ol>        <p class=\"mb-4\">Konverze jednotky se použije po výpočtu oblasti:</p>        <pre><code class=\"language-javascript\">// Apply unit conversions if needed  if (selectedUnit === &#x27;meters&#x27;) {      unitSymbol = &#x27;m²&#x27;;      // Assuming 1 pixel = 0.01 meter for example      convertedArea = area * 0.0001;  } else if (selectedUnit === &#x27;feet&#x27;) {      unitSymbol = &#x27;ft²&#x27;;      // Assuming 1 pixel = 0.0328 feet      convertedArea = area * 0.001;  }</code></pre>        <p class=\"mb-4\">Konverzní faktory si můžete přizpůsobit na základě vašich konkrétních požadavků.</p>        <img src=\"https://static.calculators.im/upload/image/19/image-3.jpg\"          alt=\"Unit Conversion Interface\" class=\"w-full rounded-lg shadow-md mb-4\" loading=\"lazy\" width=\"1200\"          height=\"1200\">        <p class=\"text-sm text-gray-600 italic mb-6\">Rozhraní kalkulačky ukazující možnosti převodu jednotky pro různé systémy měření</p>        <h3 class=\"text-xl font-semibold mb-4\">Podrobné kroky výpočtu</h3>        <p class=\"mb-4\">Abychom uživatelům pomohli pochopit, jak je oblast vypočítána, poskytujeme podrobné rozdělení kroků výpočtu:</p>        <pre><code class=\"language-javascript\">// Add the calculation steps  for (let i = 0; i &lt; points.length; i++) {      const j = (i + 1) % points.length;      const term = (points[i].x * points[j].y - points[j].x * points[i].y).toFixed(2);      resultHTML += `&lt;li&gt;Step ${i+1}: (${points[i].x} × ${points[j].y}) - (${points[j].x} × ${points[i].y}) = ${term}&lt;/li&gt;`;  }</code></pre>        <p class=\"mb-4\">Tato transparentnost pomáhá uživatelům ověřit výsledky a dozvědět se o matematických principech výpočtů oblasti polygonů.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Testování a ověření</h2>        <p class=\"mb-4\">Než zvážíme naši kalkulačku geometrie kompletní, vyzkoušejte ji s některými známými tvary, abychom ověřili jeho přesnost:</p>        <h3 class=\"text-xl font-semibold mb-4\">Zkušební případ 1: obdélník</h3>        <p class=\"mb-4\">Jednoduchý obdélník s vrcholy při (0,0), (100,0), (100,50) a (0,50) by měl mít plochu 5 000 čtverečních jednotek.</p>        <h3 class=\"text-xl font-semibold mb-4\">Zkušební případ 2: trojúhelník</h3>        <p class=\"mb-4\">Trojúhelník s vrcholy při (0,0), (50 100) a (100,0) by měl mít plochu 5 000 čtverečních jednotek.</p>        <h3 class=\"text-xl font-semibold mb-4\">Zkušební případ 3: Nepravidelný polygon</h3>        <p class=\"mb-4\">Nepravidelný polygon s vrcholy při (0,0), (50 100), (100,50), (75,25) a (25,25) by nám měl dát správnou oblast založenou na vzorci tkanic.</p>        <p class=\"mb-4\">Pro každý testovací případ by naše kalkulačka měla:</p>      <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Povolit snadné vstup testovacích souřadnic</li>          <li class=\"mb-2\">Vypočítejte správnou oblast</li>          <li class=\"mb-2\">Zobrazit kroky výpočtu pro ověření</li>      </ol>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Optimalizace pro mobilní zařízení</h2>        <p class=\"mb-4\">Aby byla naše kalkulačka geometrie plně reagována, můžeme přidat následující vylepšení:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Dotkněte se podpory pro interakci plátna</li>          <li class=\"mb-2\">Responzivní rozvržení, které se přizpůsobuje různým velikostem obrazovky</li>          <li class=\"mb-2\">Zjednodušené rozhraní pro menší obrazovky</li>      </ol>        <p class=\"mb-4\">Tyto přírůstky zajišťují, že naše kalkulačka je použitelná na chytrých telefonech a tabletech, což je přístupné uživatelům na všech zařízeních.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Další vylepšení</h2>        <p class=\"mb-4\">Chcete -li, aby byla naše kalkulačka oblasti geometrie ještě robustnější, zvažte implementaci těchto dodatečných funkcí:</p>        <h3 class=\"text-xl font-semibold mb-4\">Přednastavené tvary</h3>        <p class=\"mb-4\">Přidejte tlačítka pro rychle vytvoření běžných tvarů jako:</p>      <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Náměstí</li>          <li class=\"mb-2\">Obdélník</li>          <li class=\"mb-2\">Trojúhelník</li>          <li class=\"mb-2\">Kruh (aproximovaný jako běžný polygon)</li>          <li class=\"mb-2\">Pravidelné polygony (Pentagon, hexagon atd.)</li>      </ul>        <h3 class=\"text-xl font-semibold mb-4\">Výpočet oblasti pro kruhy</h3>        <p class=\"mb-4\">Rozšiřte kalkulačku tak, aby manipulovala s kruhovými oblastmi:</p>      <pre><code class=\"language-javascript\">function calculateCircleArea(radius) {      return Math.PI * radius * radius;  }</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">Výpočet obvodu</h3>        <p class=\"mb-4\">Přidejte funkčnost pro výpočet obvodu polygonů:</p>      <pre><code class=\"language-javascript\">function calculatePolygonPerimeter(vertices) {      let perimeter = 0;      const n = vertices.length;            for (let i = 0; i &lt; n; i++) {          const j = (i + 1) % n;          const dx = vertices[j].x - vertices[i].x;          const dy = vertices[j].y - vertices[i].y;          perimeter += Math.sqrt(dx * dx + dy * dy);      }            return perimeter;  }</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">Úspora a nakládání polygonů</h3>        <p class=\"mb-4\">Implementujte localStorage pro uložení a načítání konfigurací polygonu:</p>      <pre><code class=\"language-javascript\">// Save polygon  function savePolygon(name) {      const polygonData = JSON.stringify(points);      localStorage.setItem(`polygon_${name}`, polygonData);  }    // Load polygon  function loadPolygon(name) {      const polygonData = localStorage.getItem(`polygon_${name}`);      if (polygonData) {          points = JSON.parse(polygonData);          updateCoordinateInputs();          redrawCanvas();      }  }</code></pre>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Praktické aplikace</h2>        <img src=\"https://static.calculators.im/upload/image/19/image-4.jpg\"          alt=\"Real-world Applications of Geometry Calculators\" class=\"w-full rounded-lg shadow-md mb-4\" width=\"800\"          height=\"1200\">        <p class=\"text-sm text-gray-600 italic mb-6\">Různé aplikace v reálném světě, kde kalkulačky oblasti geometrie poskytují cenná řešení</p>        <p class=\"mb-4\">Naše kalkulačka oblasti geometrie JavaScriptu má řadu praktických aplikací:</p>        <h3 class=\"text-xl font-semibold mb-4\">Vývoj webu</h3>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Interaktivní mapy a vizualizace vykreslení</li>          <li class=\"mb-2\">Aplikace pro průzkum půdy</li>          <li class=\"mb-2\">Nástroje pro plánování nemovitostí</li>          <li class=\"mb-2\">Rozložení pokoje a návrhové aplikace</li>      </ul>        <h3 class=\"text-xl font-semibold mb-4\">Školství</h3>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Výuka geometrických principů interaktivně</li>          <li class=\"mb-2\">Vizualizace matematických konceptů</li>          <li class=\"mb-2\">Vytváření interaktivních učebních zdrojů</li>      </ul>        <h3 class=\"text-xl font-semibold mb-4\">Vývoj hry</h3>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Detekce kolize pro herní objekty</li>          <li class=\"mb-2\">Návrh úrovně a vytváření prostředí</li>          <li class=\"mb-2\">Procedurální generování herních světů</li>      </ul>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Závěr</h2>        <p class=\"mb-4\">V tomto komplexním tutoriálu jsme vytvořili výkonnou kalkulačku interaktivní geometrie pomocí JavaScriptu.Naše kalkulačka může:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Přesně vypočítejte oblast jakéhokoli polygonu pomocí vzorec boku</li>          <li class=\"mb-2\">Poskytněte intuitivní vizuální rozhraní pro vytváření a úpravu tvarů</li>          <li class=\"mb-2\">Podporujte vstup manuální souřadnice pro přesná měření</li>          <li class=\"mb-2\">Převést mezi různými jednotkami měření</li>          <li class=\"mb-2\">Zobrazit podrobné kroky výpočtu pro vzdělávací účely</li>      </ol>        <p class=\"mb-4\">Principy a techniky, které jsme zakryli - koordinátová geometrie, algoritmus thota, manipulace s plátno a design uživatelského rozhraní - jsou cenné dovednosti, které přesahují tento konkrétní projekt.Můžete je použít na různé výzvy pro vývoj webových stránek, od vizualizace dat po interaktivní aplikace.</p>        <p class=\"mb-4\">Budováním této geometrické kalkulačky jste nejen vytvořili užitečný nástroj, ale také prohloubili vaše porozumění matematickým konceptům a jejich implementaci v JavaScriptu.Neváhejte rozšířit kalkulačku s dalšími funkcemi, optimalizovat její výkon nebo ji integrovat do svých vlastních projektů.</p>        <p class=\"mb-4\">Šťastné kódování!</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Zdroje pro další učení</h2>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\" title=\"Webové dokumenty MDN: Canvas API\" target=\"_blank\" rel=\"nofollow\">Webové dokumenty MDN: Canvas API</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://www.khanacademy.org/math/basic-geo/basic-geo-coord-plane\" title=\"Khan Academy: Koordinace geometrie\" target=\"_blank\" rel=\"nofollow\">Khan Academy: Koordinace geometrie</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://en.wikipedia.org/wiki/Shoelace_formula\" title=\"Wikipedia: Shoelace vzorec\" target=\"_blank\" rel=\"nofollow\">Wikipedia: Shoelace vzorec</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://www.youtube.com/watch?v=AmM_5-o40sQ\" title=\"JavaScript pro matematickou vizualizaci\" target=\"_blank\" rel=\"nofollow\">JavaScript pro matematickou vizualizaci</a></li>      </ul>  </section>"
}