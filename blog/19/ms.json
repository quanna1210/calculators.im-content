{
    "trans": "<p class=\"text-gray-700 italic mb-4\">Panduan yang mendalam untuk membuat kalkulator geometri interaktif anda sendiri menggunakan JavaScript, lengkap dengan pengiraan kawasan untuk poligon mudah dan kompleks.</p>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Pengenalan: Mengapa Membina Kalkulator Geometri?</h2>        <p class=\"mb-4\">Pengiraan geometri membentuk asas pelbagai aplikasi dunia sebenar-dari tinjauan tanah dan seni bina kepada pembangunan permainan dan sistem maklumat geografi.Sebagai pemaju, kita sering memerlukan alat yang boleh dipercayai untuk mengira bidang pelbagai bentuk.Walaupun terdapat banyak kalkulator dalam talian yang ada, membina sendiri menawarkan beberapa kelebihan:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Penyesuaian lengkap agar sesuai dengan keperluan projek khusus anda</li>          <li class=\"mb-2\">Fleksibiliti integrasi dengan aplikasi web anda yang ada</li>          <li class=\"mb-2\">Peluang belajar untuk memahami menyelaraskan geometri dan pemikiran algoritma</li>          <li class=\"mb-2\">Peningkatan Portfolio untuk mempamerkan kemahiran JavaScript anda</li>      </ol>        <p class=\"mb-4\">Dalam tutorial yang komprehensif ini, kami akan melalui proses membina kalkulator kawasan geometri yang kuat dan interaktif menggunakan JavaScript.Pada akhirnya, anda akan mempunyai aplikasi web berfungsi sepenuhnya yang mengira dengan tepat kawasan poligon mudah dan kompleks menggunakan geometri koordinat.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Apa yang akan kita bina</h2>        <p class=\"mb-4\">Kalkulator Geometri kami akan:</p>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Benarkan pengguna memasukkan koordinat poligon melalui antara muka intuitif</li>          <li class=\"mb-2\">Kirakan kawasan untuk kedua -dua poligon biasa dan tidak teratur</li>          <li class=\"mb-2\">Sokong pelbagai unit pengukuran</li>          <li class=\"mb-2\">Gambarkan bentuk menggunakan kanvas html</li>          <li class=\"mb-2\">Memberikan hasil yang jelas dan tepat dengan pembulatan yang betul</li>          <li class=\"mb-2\">Bekerja di semua pelayar dan peranti utama</li>      </ul>        <img src=\"https://cdn.statically.io/gh/quanna1210/calculators.im-content/refs/heads/master/upload/image/19/image-1.jpg\"          alt=\"Geometry Area Calculator Interface\" class=\"w-full rounded-lg shadow-md mb-4\" loading=\"lazy\" width=\"1200\"          height=\"1200\">        <p class=\"text-sm text-gray-600 italic mb-6\">Pratonton Kalkulator Kawasan Geometri JavaScript terakhir kami dengan input poligon interaktif</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Prasyarat</h2>        <p class=\"mb-4\">Untuk mengikuti tutorial ini, anda harus mempunyai:</p>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Pemahaman asas HTML, CSS, dan JavaScript</li>          <li class=\"mb-2\">Kebiasaan dengan manipulasi dom</li>          <li class=\"mb-2\">Editor teks atau IDE (vs kod, teks luhur, dll.)</li>          <li class=\"mb-2\">Penyemak imbas web moden</li>          <li class=\"mb-2\">Pilihan: Memahami asas geometri koordinat</li>      </ul>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Memahami matematik di sebalik pengiraan kawasan</h2>        <p class=\"mb-4\">Sebelum menyelam ke dalam kod, mari kita fahami prinsip -prinsip matematik yang menguasai kalkulator geometri kita.</p>        <h3 class=\"text-xl font-semibold mb-4\">Formula kasut untuk kawasan poligon</h3>        <p class=\"mb-4\">Untuk mengira kawasan mana -mana poligon (biasa atau tidak teratur), kami akan menggunakan formula kasut, yang juga dikenali sebagai formula juru ukur atau formula kawasan Gauss.Algoritma yang kuat ini berfungsi untuk mana -mana poligon yang ditakrifkan oleh simpulnya, tanpa mengira betapa kompleksnya bentuknya.</p>        <p class=\"mb-4\">Formula dinyatakan sebagai:</p>        <div class=\"bg-gray-100 p-4 rounded-lg mb-6\">          <code>Area = 0.5 * |∑(x_i * y_(i+1) - x_(i+1) * y_i)|</code>      </div>        <p class=\"mb-4\">Di mana:</p>      <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\"><code>x_i</code> and <code>y_i</code> are the coordinates of the i-th vertex</li>          <li class=\"mb-2\">Formula mengira separuh jumlah produk salib dari simpang bersebelahan</li>          <li class=\"mb-2\">Nilai mutlak memastikan kawasan positif</li>      </ul>        <p class=\"mb-4\">Formula ini berfungsi dengan \"berjalan\" di sekitar perimeter poligon, mengira produk silang antara titik berturut -turut.Apabila kita menyimpulkan ini dan membahagikannya dengan 2, kita mendapat kawasan poligon.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Persediaan Projek</h2>        <p class=\"mb-4\">Mari kita mulakan dengan menubuhkan struktur asas kalkulator geometri kami:</p>        <h3 class=\"text-xl font-semibold mb-4\">Struktur HTML</h3>        <p class=\"mb-4\">Create a new file named <code>index.html</code> with the following structure:</p>        <pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;  &lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;      &lt;meta charset=&quot;UTF-8&quot;&gt;      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;      &lt;title&gt;Geometry Area Calculator&lt;/title&gt;      &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;  &lt;/head&gt;  &lt;body&gt;      &lt;div class=&quot;calculator-container&quot;&gt;          &lt;h1&gt;Geometry Area Calculator&lt;/h1&gt;                    &lt;div class=&quot;input-section&quot;&gt;              &lt;h2&gt;Enter Polygon Coordinates&lt;/h2&gt;              &lt;p&gt;Click on the canvas to add points or enter them manually below.&lt;/p&gt;                            &lt;div class=&quot;canvas-container&quot;&gt;                  &lt;canvas id=&quot;polygon-canvas&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;                  &lt;button id=&quot;clear-canvas&quot;&gt;Clear Canvas&lt;/button&gt;              &lt;/div&gt;                            &lt;div class=&quot;manual-input&quot;&gt;                  &lt;div class=&quot;coordinates-container&quot; id=&quot;coordinates-list&quot;&gt;                      &lt;div class=&quot;coordinate-pair&quot;&gt;                          &lt;input type=&quot;number&quot; placeholder=&quot;X1&quot; class=&quot;x-coord&quot;&gt;                          &lt;input type=&quot;number&quot; placeholder=&quot;Y1&quot; class=&quot;y-coord&quot;&gt;                          &lt;button class=&quot;remove-point&quot;&gt;×&lt;/button&gt;                      &lt;/div&gt;                  &lt;/div&gt;                  &lt;button id=&quot;add-point&quot;&gt;Add Point&lt;/button&gt;              &lt;/div&gt;                            &lt;div class=&quot;units-selection&quot;&gt;                  &lt;label for=&quot;units&quot;&gt;Measurement Units:&lt;/label&gt;                  &lt;select id=&quot;units&quot;&gt;                      &lt;option value=&quot;pixels&quot;&gt;Pixels&lt;/option&gt;                      &lt;option value=&quot;meters&quot;&gt;Meters&lt;/option&gt;                      &lt;option value=&quot;feet&quot;&gt;Feet&lt;/option&gt;                  &lt;/select&gt;              &lt;/div&gt;                            &lt;button id=&quot;calculate-area&quot;&gt;Calculate Area&lt;/button&gt;          &lt;/div&gt;                    &lt;div class=&quot;results-section&quot; id=&quot;results&quot;&gt;              &lt;!-- Results will be displayed here --&gt;          &lt;/div&gt;      &lt;/div&gt;            &lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;  &lt;/body&gt;  &lt;/html&gt;</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">CSS Styling</h3>        <p class=\"mb-4\">Create a file named <code>styles.css</code> for styling our calculator:</p>        <pre><code class=\"language-css\">* {      box-sizing: border-box;      margin: 0;      padding: 0;      font-family: &#x27;Segoe UI&#x27;, Tahoma, Geneva, Verdana, sans-serif;  }    body {      background-color: #f5f5f5;      padding: 20px;  }    .calculator-container {      max-width: 800px;      margin: 0 auto;      background-color: white;      padding: 30px;      border-radius: 10px;      box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);  }    h1 {      text-align: center;      color: #333;      margin-bottom: 30px;  }    h2 {      font-size: 1.5rem;      margin-bottom: 15px;      color: #444;  }    p {      margin-bottom: 20px;      color: #666;  }    .canvas-container {      margin-bottom: 30px;      text-align: center;  }    canvas {      border: 1px solid #ccc;      background-color: #f9f9f9;  }    .manual-input {      margin-bottom: 25px;  }    .coordinates-container {      max-height: 200px;      overflow-y: auto;      margin-bottom: 15px;  }    .coordinate-pair {      display: flex;      margin-bottom: 8px;      align-items: center;  }    input {      width: 80px;      padding: 8px;      margin-right: 10px;      border: 1px solid #ccc;      border-radius: 4px;  }    button {      padding: 8px 15px;      background-color: #4CAF50;      color: white;      border: none;      border-radius: 4px;      cursor: pointer;      transition: background-color 0.3s;  }    button:hover {      background-color: #45a049;  }    .remove-point {      background-color: #f44336;      padding: 8px 12px;  }    .remove-point:hover {      background-color: #d32f2f;  }    #clear-canvas {      margin-top: 10px;  }    .units-selection {      margin-bottom: 25px;  }    select {      padding: 8px;      border: 1px solid #ccc;      border-radius: 4px;  }    .results-section {      margin-top: 30px;      padding: 20px;      background-color: #f0f8ff;      border-radius: 6px;      display: none;  }    .results-section.active {      display: block;  }    .area-result {      font-size: 1.3rem;      margin-bottom: 15px;  }    .calculation-steps {      margin-top: 20px;      padding: 15px;      background-color: #f5f5f5;      border-radius: 4px;      font-family: monospace;  }</code></pre>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Pelaksanaan JavaScript</h2>        <p class=\"mb-4\">Now, let's create the <code>script.js</code> file that will power our <strong>geometry area              calculator</strong>:</p>        <pre><code class=\"language-javascript\">// DOM Elements  const canvas = document.getElementById(&#x27;polygon-canvas&#x27;);  const ctx = canvas.getContext(&#x27;2d&#x27;);  const clearCanvasBtn = document.getElementById(&#x27;clear-canvas&#x27;);  const addPointBtn = document.getElementById(&#x27;add-point&#x27;);  const coordinatesList = document.getElementById(&#x27;coordinates-list&#x27;);  const calculateBtn = document.getElementById(&#x27;calculate-area&#x27;);  const resultsSection = document.getElementById(&#x27;results&#x27;);  const unitsSelect = document.getElementById(&#x27;units&#x27;);    // Global Variables  let points = [];  let isDragging = false;  let dragIndex = -1;    // Canvas Setup  function setupCanvas() {      // Set canvas coordinate system (origin at center)      ctx.translate(canvas.width / 2, canvas.height / 2);      drawGrid();            // Event listeners for canvas interaction      canvas.addEventListener(&#x27;mousedown&#x27;, handleMouseDown);      canvas.addEventListener(&#x27;mousemove&#x27;, handleMouseMove);      canvas.addEventListener(&#x27;mouseup&#x27;, () =&gt; isDragging = false);            // Redraw canvas initially      redrawCanvas();  }    // Draw coordinate grid  function drawGrid() {      const width = canvas.width;      const height = canvas.height;            ctx.strokeStyle = &#x27;#e0e0e0&#x27;;      ctx.lineWidth = 1;            // Vertical lines      for (let x = -width/2; x &lt;= width/2; x += 20) {          ctx.beginPath();          ctx.moveTo(x, -height/2);          ctx.lineTo(x, height/2);          ctx.stroke();      }            // Horizontal lines      for (let y = -height/2; y &lt;= height/2; y += 20) {          ctx.beginPath();          ctx.moveTo(-width/2, y);          ctx.lineTo(width/2, y);          ctx.stroke();      }            // X and Y axes (darker)      ctx.strokeStyle = &#x27;#aaa&#x27;;      ctx.lineWidth = 2;            // X-axis      ctx.beginPath();      ctx.moveTo(-width/2, 0);      ctx.lineTo(width/2, 0);      ctx.stroke();            // Y-axis      ctx.beginPath();      ctx.moveTo(0, -height/2);      ctx.lineTo(0, height/2);      ctx.stroke();  }    // Handle mouse down event on canvas  function handleMouseDown(e) {      const rect = canvas.getBoundingClientRect();      const scaleX = canvas.width / rect.width;      const scaleY = canvas.height / rect.height;            const canvasX = (e.clientX - rect.left) * scaleX - canvas.width / 2;      const canvasY = (e.clientY - rect.top) * scaleY - canvas.height / 2;            // Check if clicking near an existing point (for dragging)      for (let i = 0; i &lt; points.length; i++) {          const dx = points[i].x - canvasX;          const dy = points[i].y - canvasY;          const distance = Math.sqrt(dx * dx + dy * dy);                    if (distance &lt; 10) {              isDragging = true;              dragIndex = i;              return;          }      }            // If not dragging, add a new point      points.push({x: canvasX, y: canvasY});      updateCoordinateInputs();      redrawCanvas();  }    // Handle mouse move event on canvas  function handleMouseMove(e) {      if (!isDragging || dragIndex === -1) return;            const rect = canvas.getBoundingClientRect();      const scaleX = canvas.width / rect.width;      const scaleY = canvas.height / rect.height;            const canvasX = (e.clientX - rect.left) * scaleX - canvas.width / 2;      const canvasY = (e.clientY - rect.top) * scaleY - canvas.height / 2;            points[dragIndex] = {x: canvasX, y: canvasY};      updateCoordinateInputs();      redrawCanvas();  }    // Redraw the canvas with all points and connections  function redrawCanvas() {      // Clear the canvas      ctx.clearRect(-canvas.width/2, -canvas.height/2, canvas.width, canvas.height);            // Redraw the grid      drawGrid();            if (points.length === 0) return;            // Draw the polygon      ctx.beginPath();      ctx.moveTo(points[0].x, points[0].y);            for (let i = 1; i &lt; points.length; i++) {          ctx.lineTo(points[i].x, points[i].y);      }            // Connect back to the first point if we have at least 3 points      if (points.length &gt;= 3) {          ctx.lineTo(points[0].x, points[0].y);                    // Fill the polygon with a semi-transparent color          ctx.fillStyle = &#x27;rgba(76, 175, 80, 0.2)&#x27;;          ctx.fill();      }            // Draw the polygon outline      ctx.strokeStyle = &#x27;#4CAF50&#x27;;      ctx.lineWidth = 2;      ctx.stroke();            // Draw the points      for (let i = 0; i &lt; points.length; i++) {          ctx.beginPath();          ctx.arc(points[i].x, points[i].y, 5, 0, Math.PI * 2);          ctx.fillStyle = &#x27;#4CAF50&#x27;;          ctx.fill();                    // Label the points          ctx.fillStyle = &#x27;#333&#x27;;          ctx.font = &#x27;12px Arial&#x27;;          ctx.fillText(`P${i+1}`, points[i].x + 8, points[i].y - 8);      }  }    // Update the coordinate inputs based on canvas points  function updateCoordinateInputs() {      // Clear all existing inputs      coordinatesList.innerHTML = &#x27;&#x27;;            // Add new inputs for each point      for (let i = 0; i &lt; points.length; i++) {          const pair = document.createElement(&#x27;div&#x27;);          pair.className = &#x27;coordinate-pair&#x27;;                    const xInput = document.createElement(&#x27;input&#x27;);          xInput.type = &#x27;number&#x27;;          xInput.className = &#x27;x-coord&#x27;;          xInput.placeholder = `X${i+1}`;          xInput.value = Math.round(points[i].x);          xInput.dataset.index = i;                    const yInput = document.createElement(&#x27;input&#x27;);          yInput.type = &#x27;number&#x27;;          yInput.className = &#x27;y-coord&#x27;;          yInput.placeholder = `Y${i+1}`;          yInput.value = Math.round(points[i].y);          yInput.dataset.index = i;                    const removeBtn = document.createElement(&#x27;button&#x27;);          removeBtn.className = &#x27;remove-point&#x27;;          removeBtn.textContent = &#x27;×&#x27;;          removeBtn.dataset.index = i;                    pair.appendChild(xInput);          pair.appendChild(yInput);          pair.appendChild(removeBtn);          coordinatesList.appendChild(pair);                    // Event listeners for manual input changes          xInput.addEventListener(&#x27;change&#x27;, updatePointFromInput);          yInput.addEventListener(&#x27;change&#x27;, updatePointFromInput);          removeBtn.addEventListener(&#x27;click&#x27;, removePoint);      }  }    // Update a point from manual input  function updatePointFromInput(e) {      const index = parseInt(e.target.dataset.index);      const value = parseFloat(e.target.value);            if (isNaN(value)) return;            if (e.target.className === &#x27;x-coord&#x27;) {          points[index].x = value;      } else {          points[index].y = value;      }            redrawCanvas();  }    // Remove a point  function removePoint(e) {      const index = parseInt(e.target.dataset.index);      points.splice(index, 1);      updateCoordinateInputs();      redrawCanvas();  }    // Add a new point via button  function addNewPoint() {      // Add a new point at (0, 0) or near the last point if one exists      if (points.length &gt; 0) {          const lastPoint = points[points.length - 1];          points.push({x: lastPoint.x + 20, y: lastPoint.y + 20});      } else {          points.push({x: 0, y: 0});      }            updateCoordinateInputs();      redrawCanvas();  }    // Clear all points  function clearCanvas() {      points = [];      updateCoordinateInputs();      redrawCanvas();      resultsSection.style.display = &#x27;none&#x27;;  }    // Calculate area using the Shoelace formula  function calculatePolygonArea(vertices) {      if (vertices.length &lt; 3) return 0;            let area = 0;      const n = vertices.length;            for (let i = 0; i &lt; n; i++) {          const j = (i + 1) % n;          area += vertices[i].x * vertices[j].y;          area -= vertices[j].x * vertices[i].y;      }            return Math.abs(area / 2);  }    // Display the calculation results  function displayResults() {      if (points.length &lt; 3) {          alert(&quot;You need at least 3 points to calculate area.&quot;);          return;      }            const area = calculatePolygonArea(points);      const selectedUnit = unitsSelect.value;            let unitSymbol = &#x27;px²&#x27;;      let convertedArea = area;            // Apply unit conversions if needed      if (selectedUnit === &#x27;meters&#x27;) {          unitSymbol = &#x27;m²&#x27;;          // Assuming 1 pixel = 0.01 meter for example          convertedArea = area * 0.0001;      } else if (selectedUnit === &#x27;feet&#x27;) {          unitSymbol = &#x27;ft²&#x27;;          // Assuming 1 pixel = 0.0328 feet          convertedArea = area * 0.001;      }            // Format the result      const formattedArea = convertedArea.toFixed(2);            // Create the result HTML      let resultHTML = `          &lt;h2&gt;Calculation Results&lt;/h2&gt;          &lt;div class=&quot;area-result&quot;&gt;              &lt;strong&gt;Polygon Area:&lt;/strong&gt; ${formattedArea} ${unitSymbol}          &lt;/div&gt;          &lt;p&gt;Based on ${points.length} vertices&lt;/p&gt;                    &lt;div class=&quot;calculation-steps&quot;&gt;              &lt;h3&gt;Calculation Steps:&lt;/h3&gt;              &lt;p&gt;Using the Shoelace formula: A = 0.5 × |∑(xᵢyᵢ₊₁ − xᵢ₊₁yᵢ)|&lt;/p&gt;              &lt;ol&gt;      `;            // Add the calculation steps      for (let i = 0; i &lt; points.length; i++) {          const j = (i + 1) % points.length;          const term = (points[i].x * points[j].y - points[j].x * points[i].y).toFixed(2);          resultHTML += `&lt;li&gt;Step ${i+1}: (${points[i].x} × ${points[j].y}) - (${points[j].x} × ${points[i].y}) = ${term}&lt;/li&gt;`;      }            resultHTML += `              &lt;/ol&gt;              &lt;p&gt;Summing all steps and taking absolute value: ${Math.abs(area).toFixed(2)}&lt;/p&gt;              &lt;p&gt;Dividing by 2: ${(Math.abs(area)/2).toFixed(2)}&lt;/p&gt;          &lt;/div&gt;      `;            resultsSection.innerHTML = resultHTML;      resultsSection.style.display = &#x27;block&#x27;;      resultsSection.scrollIntoView({ behavior: &#x27;smooth&#x27; });  }    // Initialize the application  function init() {      setupCanvas();            // Event listeners      clearCanvasBtn.addEventListener(&#x27;click&#x27;, clearCanvas);      addPointBtn.addEventListener(&#x27;click&#x27;, addNewPoint);      calculateBtn.addEventListener(&#x27;click&#x27;, displayResults);  }    // Start the app when the page loads  window.addEventListener(&#x27;load&#x27;, init);</code></pre>        <img src=\"https://cdn.statically.io/gh/quanna1210/calculators.im-content/refs/heads/master/upload/image/19/image-2.jpg\"          alt=\"Polygon Area Calculation with Shoelace Formula\" class=\"w-full rounded-lg shadow-md mb-4\" loading=\"lazy\"          width=\"1200\" height=\"1200\">        <p class=\"text-sm text-gray-600 italic mb-6\">Perwakilan visual bagaimana formula kasut mengira kawasan poligon</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Memahami komponen utama</h2>        <p class=\"mb-4\">Mari merosakkan komponen utama kalkulator Kawasan Geometri kami:</p>        <h3 class=\"text-xl font-semibold mb-4\">Interaksi kanvas</h3>        <p class=\"mb-4\">Kalkulator kami menggunakan elemen kanvas HTML untuk penciptaan poligon interaktif.Pengguna boleh:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Klik pada kanvas untuk menambah mata</li>          <li class=\"mb-2\">Seret mata sedia ada untuk menyesuaikan kedudukan</li>          <li class=\"mb-2\">Lihat visualisasi masa nyata poligon</li>          <li class=\"mb-2\">Lihat grid koordinat untuk rujukan</li>      </ol>        <p class=\"mb-4\">Kanvas ini ditubuhkan dengan sistem koordinat di mana (0,0) berada di pusat, menjadikannya intuitif bagi pengguna untuk bekerja dengan koordinat positif dan negatif.</p>        <h3 class=\"text-xl font-semibold mb-4\">Menyelaras pengurusan input</h3>        <p class=\"mb-4\">Pengguna boleh memasukkan koordinat dalam dua cara:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Input Visual: Klik terus pada kanvas untuk meletakkan mata</li>          <li class=\"mb-2\">Input manual: Masukkan koordinat tepat dalam medan input</li>      </ol>        <p class=\"mb-4\">Kedua -dua kaedah input disegerakkan, membolehkan kedua -dua penempatan visual intuitif dan input berangka yang tepat.</p>        <h3 class=\"text-xl font-semibold mb-4\">Pelaksanaan algoritma kasut</h3>        <p class=\"mb-4\">Inti kalkulator kami adalah pelaksanaan formula kasut:</p>        <pre><code class=\"language-javascript\">function calculatePolygonArea(vertices) {      if (vertices.length &lt; 3) return 0;            let area = 0;      const n = vertices.length;            for (let i = 0; i &lt; n; i++) {          const j = (i + 1) % n;          area += vertices[i].x * vertices[j].y;          area -= vertices[j].x * vertices[i].y;      }            return Math.abs(area / 2);  }</code></pre>        <p class=\"mb-4\">Fungsi ini:</p>      <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Mengambil pelbagai koordinat puncak</li>          <li class=\"mb-2\">Gelung melalui setiap titik dan titik seterusnya (membungkus ke titik pertama)</li>          <li class=\"mb-2\">Menggunakan pengiraan silang produk</li>          <li class=\"mb-2\">Mengambil nilai mutlak dan membahagikan 2 untuk mendapatkan kawasan akhir</li>      </ol>        <p class=\"mb-4\">Keindahan algoritma ini adalah bahawa ia berfungsi untuk mana -mana poligon, tanpa mengira sama ada ia cembung atau cekung, selagi ia tidak bersilang sendiri.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Menambah ciri canggih</h2>        <p class=\"mb-4\">Sekarang kita mempunyai kalkulator asas yang berfungsi, mari kita lanjutkan dengan beberapa ciri canggih:</p>        <h3 class=\"text-xl font-semibold mb-4\">Penukaran unit</h3>        <p class=\"mb-4\">Kalkulator kami menyokong unit pengukuran yang berbeza:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Pixel: Untuk ukuran berasaskan skrin</li>          <li class=\"mb-2\">Meter: Untuk pengukuran metrik dunia nyata</li>          <li class=\"mb-2\">Kaki: Untuk pengukuran imperial</li>      </ol>        <p class=\"mb-4\">Penukaran unit digunakan selepas pengiraan kawasan:</p>        <pre><code class=\"language-javascript\">// Apply unit conversions if needed  if (selectedUnit === &#x27;meters&#x27;) {      unitSymbol = &#x27;m²&#x27;;      // Assuming 1 pixel = 0.01 meter for example      convertedArea = area * 0.0001;  } else if (selectedUnit === &#x27;feet&#x27;) {      unitSymbol = &#x27;ft²&#x27;;      // Assuming 1 pixel = 0.0328 feet      convertedArea = area * 0.001;  }</code></pre>        <p class=\"mb-4\">Anda boleh menyesuaikan faktor penukaran berdasarkan keperluan khusus anda.</p>        <img src=\"https://cdn.statically.io/gh/quanna1210/calculators.im-content/refs/heads/master/upload/image/19/image-3.jpg\"          alt=\"Unit Conversion Interface\" class=\"w-full rounded-lg shadow-md mb-4\" loading=\"lazy\" width=\"1200\"          height=\"1200\">        <p class=\"text-sm text-gray-600 italic mb-6\">Antara muka kalkulator yang menunjukkan pilihan penukaran unit untuk sistem pengukuran yang berbeza</p>        <h3 class=\"text-xl font-semibold mb-4\">Langkah pengiraan terperinci</h3>        <p class=\"mb-4\">Untuk membantu pengguna memahami bagaimana kawasan itu dikira, kami menyediakan pecahan terperinci mengenai langkah -langkah pengiraan:</p>        <pre><code class=\"language-javascript\">// Add the calculation steps  for (let i = 0; i &lt; points.length; i++) {      const j = (i + 1) % points.length;      const term = (points[i].x * points[j].y - points[j].x * points[i].y).toFixed(2);      resultHTML += `&lt;li&gt;Step ${i+1}: (${points[i].x} × ${points[j].y}) - (${points[j].x} × ${points[i].y}) = ${term}&lt;/li&gt;`;  }</code></pre>        <p class=\"mb-4\">Ketelusan ini membantu pengguna mengesahkan hasilnya dan belajar tentang prinsip -prinsip matematik di sebalik pengiraan kawasan poligon.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Ujian dan Pengesahan</h2>        <p class=\"mb-4\">Sebelum mempertimbangkan kalkulator geometri kami selesai, mari kita uji dengan beberapa bentuk yang diketahui untuk mengesahkan ketepatannya:</p>        <h3 class=\"text-xl font-semibold mb-4\">Kes Ujian 1: Rectangle</h3>        <p class=\"mb-4\">Rectangle mudah dengan simpang pada (0,0), (100,0), (100,50), dan (0,50) harus mempunyai kawasan 5,000 unit persegi.</p>        <h3 class=\"text-xl font-semibold mb-4\">Kes Ujian 2: Segitiga</h3>        <p class=\"mb-4\">Segitiga dengan simpang pada (0,0), (50,100), dan (100,0) harus mempunyai kawasan 5,000 unit persegi.</p>        <h3 class=\"text-xl font-semibold mb-4\">Ujian Kes 3: Poligon yang tidak teratur</h3>        <p class=\"mb-4\">Poligon yang tidak teratur dengan simpang pada (0,0), (50,100), (100,50), (75,25), dan (25,25) harus memberi kita kawasan yang betul berdasarkan formula kasut.</p>        <p class=\"mb-4\">Untuk setiap kes ujian, kalkulator kami harus:</p>      <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Benarkan input mudah koordinat ujian</li>          <li class=\"mb-2\">Kirakan kawasan yang betul</li>          <li class=\"mb-2\">Paparkan langkah pengiraan untuk pengesahan</li>      </ol>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Mengoptimumkan untuk peranti mudah alih</h2>        <p class=\"mb-4\">Untuk menjadikan kalkulator geometri kami responsif sepenuhnya, kami boleh menambah peningkatan berikut:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Sentuh sokongan untuk interaksi kanvas</li>          <li class=\"mb-2\">Susun atur responsif yang menyesuaikan diri dengan saiz skrin yang berbeza</li>          <li class=\"mb-2\">Antara muka yang dipermudahkan untuk skrin yang lebih kecil</li>      </ol>        <p class=\"mb-4\">Penambahan ini memastikan kalkulator kami boleh digunakan pada telefon pintar dan tablet, menjadikannya mudah diakses oleh pengguna di semua peranti.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Peningkatan tambahan</h2>        <p class=\"mb-4\">Untuk menjadikan Kalkulator Kawasan Geometri kami lebih mantap, pertimbangkan untuk melaksanakan ciri -ciri tambahan ini:</p>        <h3 class=\"text-xl font-semibold mb-4\">Bentuk preset</h3>        <p class=\"mb-4\">Tambahkan butang dengan cepat membuat bentuk biasa seperti:</p>      <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Dataran</li>          <li class=\"mb-2\">Rectangle</li>          <li class=\"mb-2\">Segitiga</li>          <li class=\"mb-2\">Bulatan (dianggarkan sebagai poligon biasa)</li>          <li class=\"mb-2\">Poligon biasa (pentagon, segi enam, dll.)</li>      </ul>        <h3 class=\"text-xl font-semibold mb-4\">Pengiraan Kawasan untuk Lingkaran</h3>        <p class=\"mb-4\">Panjangkan kalkulator untuk mengendalikan kawasan bulatan menggunakan:</p>      <pre><code class=\"language-javascript\">function calculateCircleArea(radius) {      return Math.PI * radius * radius;  }</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">Pengiraan perimeter</h3>        <p class=\"mb-4\">Tambah fungsi untuk mengira perimeter poligon:</p>      <pre><code class=\"language-javascript\">function calculatePolygonPerimeter(vertices) {      let perimeter = 0;      const n = vertices.length;            for (let i = 0; i &lt; n; i++) {          const j = (i + 1) % n;          const dx = vertices[j].x - vertices[i].x;          const dy = vertices[j].y - vertices[i].y;          perimeter += Math.sqrt(dx * dx + dy * dy);      }            return perimeter;  }</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">Menjimatkan dan memuatkan poligon</h3>        <p class=\"mb-4\">Melaksanakan LocalStorage untuk menyimpan dan memuatkan konfigurasi poligon:</p>      <pre><code class=\"language-javascript\">// Save polygon  function savePolygon(name) {      const polygonData = JSON.stringify(points);      localStorage.setItem(`polygon_${name}`, polygonData);  }    // Load polygon  function loadPolygon(name) {      const polygonData = localStorage.getItem(`polygon_${name}`);      if (polygonData) {          points = JSON.parse(polygonData);          updateCoordinateInputs();          redrawCanvas();      }  }</code></pre>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Aplikasi praktikal</h2>        <img src=\"https://cdn.statically.io/gh/quanna1210/calculators.im-content/refs/heads/master/upload/image/19/image-4.jpg\"          alt=\"Real-world Applications of Geometry Calculators\" class=\"w-full rounded-lg shadow-md mb-4\" width=\"800\"          height=\"1200\">        <p class=\"text-sm text-gray-600 italic mb-6\">Pelbagai aplikasi dunia nyata di mana kalkulator kawasan geometri menyediakan penyelesaian yang berharga</p>        <p class=\"mb-4\">Kalkulator Kawasan Geometri JavaScript kami mempunyai banyak aplikasi praktikal:</p>        <h3 class=\"text-xl font-semibold mb-4\">Pembangunan Web</h3>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Peta interaktif dan visualisasi plot</li>          <li class=\"mb-2\">Permohonan tinjauan tanah</li>          <li class=\"mb-2\">Alat Perancangan Harta Tanah</li>          <li class=\"mb-2\">Susun atur bilik dan aplikasi reka bentuk</li>      </ul>        <h3 class=\"text-xl font-semibold mb-4\">Pendidikan</h3>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Mengajar prinsip geometri secara interaktif</li>          <li class=\"mb-2\">Menggambarkan konsep matematik</li>          <li class=\"mb-2\">Mewujudkan sumber pembelajaran interaktif</li>      </ul>        <h3 class=\"text-xl font-semibold mb-4\">Pembangunan permainan</h3>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Pengesanan perlanggaran untuk objek permainan</li>          <li class=\"mb-2\">Reka Bentuk Tahap dan Penciptaan Alam Sekitar</li>          <li class=\"mb-2\">Generasi Prosedur Dunia Permainan</li>      </ul>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Kesimpulan</h2>        <p class=\"mb-4\">Dalam tutorial yang komprehensif ini, kami telah membina kalkulator kawasan geometri yang kuat dan interaktif menggunakan JavaScript.Kalkulator kami boleh:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Hitung dengan tepat kawasan poligon menggunakan formula kasut</li>          <li class=\"mb-2\">Sediakan antara muka visual intuitif untuk membuat dan mengubah bentuk bentuk</li>          <li class=\"mb-2\">Sokongan input koordinat manual untuk pengukuran yang tepat</li>          <li class=\"mb-2\">Tukar antara unit pengukuran yang berbeza</li>          <li class=\"mb-2\">Tunjukkan langkah pengiraan terperinci untuk tujuan pendidikan</li>      </ol>        <p class=\"mb-4\">Prinsip dan teknik yang kami tutup -koordinat geometri, algoritma kasut, manipulasi kanvas, dan reka bentuk antara muka pengguna -adalah kemahiran berharga yang melangkaui projek khusus ini.Anda boleh menggunakannya untuk pelbagai cabaran pembangunan web, dari visualisasi data ke aplikasi interaktif.</p>        <p class=\"mb-4\">Dengan membina kalkulator geometri ini, anda bukan sahaja mencipta alat yang berguna tetapi juga memperdalam pemahaman anda tentang konsep matematik dan pelaksanaannya dalam JavaScript.Jangan ragu untuk melanjutkan kalkulator dengan ciri tambahan, mengoptimumkan prestasinya, atau mengintegrasikannya ke dalam projek anda sendiri.</p>        <p class=\"mb-4\">Selamat pengekodan!</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Sumber untuk pembelajaran selanjutnya</h2>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\" title=\"Dokumen Web MDN: Canvas API\" target=\"_blank\" rel=\"nofollow\">Dokumen Web MDN: Canvas API</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://www.khanacademy.org/math/basic-geo/basic-geo-coord-plane\" title=\"Akademi Khan: Menyelaras Geometri\" target=\"_blank\" rel=\"nofollow\">Akademi Khan: Menyelaras Geometri</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://en.wikipedia.org/wiki/Shoelace_formula\" title=\"Wikipedia: Formula Shoelace\" target=\"_blank\" rel=\"nofollow\">Wikipedia: Formula Shoelace</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://www.youtube.com/watch?v=AmM_5-o40sQ\" title=\"JavaScript untuk visualisasi matematik\" target=\"_blank\" rel=\"nofollow\">JavaScript untuk visualisasi matematik</a></li>      </ul>  </section>"
}