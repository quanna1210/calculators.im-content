{
    "trans": "<p class=\"text-gray-700 italic mb-4\">Basit ve karmaşık çokgenler için alan hesaplamalarıyla birlikte JavaScript kullanarak kendi etkileşimli geometri hesap makinenizi oluşturmak için derinlemesine bir kılavuz.</p>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Giriş: Neden bir Geometri Hesap Makinesi Oluştur?</h2>        <p class=\"mb-4\">Geometri hesaplamaları, arazi araştırmasından ve mimariden oyun geliştirmeye ve coğrafi bilgi sistemlerine kadar çok sayıda gerçek dünya uygulamasının temelini oluşturur.Geliştiriciler olarak, çeşitli şekillerin alanlarını hesaplamak için genellikle güvenilir araçlara ihtiyacımız var.Mevcut birçok çevrimiçi hesap makinesi olsa da, kendinizi oluşturmak çeşitli avantajlar sunuyor:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Özel proje gereksinimlerinize uyacak şekilde tamamen özelleştirme</li>          <li class=\"mb-2\">Mevcut web uygulamalarınızla entegrasyon esnekliği</li>          <li class=\"mb-2\">Koordinat geometrisini ve algoritmik düşünceyi anlama fırsatı</li>          <li class=\"mb-2\">JavaScript becerilerinizi sergilemek için portföy geliştirme</li>      </ol>        <p class=\"mb-4\">Bu kapsamlı öğreticide, JavaScript kullanarak güçlü, etkileşimli bir geometri alan hesap makinesi oluşturma sürecinden geçeceğiz.Sonunda, koordinat geometrisini kullanarak hem basit hem de karmaşık çokgenlerin alanını doğru bir şekilde hesaplayan tamamen işlevsel bir web uygulamasına sahip olacaksınız.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Ne inşa edeceğiz</h2>        <p class=\"mb-4\">Geometri hesap makinemiz:</p>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Kullanıcıların sezgisel bir arayüz aracılığıyla çokgen koordinatlarını girmesine izin verin</li>          <li class=\"mb-2\">Hem düzenli hem de düzensiz çokgenler için alanları hesaplayın</li>          <li class=\"mb-2\">Birden çok ölçüm birimini destekleyin</li>          <li class=\"mb-2\">HTML Canvas kullanarak şekilleri görselleştirin</li>          <li class=\"mb-2\">Uygun yuvarlama ile net, doğru sonuçlar sağlayın</li>          <li class=\"mb-2\">Tüm büyük tarayıcılar ve cihazlarda çalışın</li>      </ul>        <img src=\"https://cdn.statically.io/gh/quanna1210/calculators.im-content/refs/heads/master/upload/image/19/image-1.jpg\"          alt=\"Geometry Area Calculator Interface\" class=\"w-full rounded-lg shadow-md mb-4\" loading=\"lazy\" width=\"1200\"          height=\"1200\">        <p class=\"text-sm text-gray-600 italic mb-6\">Etkileşimli Polygon Girişli Son JavaScript Geometri Alan Hesap Makinemizin Önizlemesi</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Önkoşul</h2>        <p class=\"mb-4\">Bu öğreticiyle birlikte takip etmek için:</p>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">HTML, CSS ve JavaScript'in temel anlayışı</li>          <li class=\"mb-2\">Dom manipülasyonuna aşinalık</li>          <li class=\"mb-2\">Metin Düzenleyicisi veya IDE (Kod, Yüce Metin, vb.)</li>          <li class=\"mb-2\">Modern Web Tarayıcısı</li>          <li class=\"mb-2\">İsteğe bağlı: koordinat geometri temellerinin anlaşılması</li>      </ul>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Alan hesaplamalarının arkasındaki matematiği anlamak</h2>        <p class=\"mb-4\">Kod içine dalmadan önce, geometri hesap makinemize güç veren matematiksel ilkeleri anlayalım.</p>        <h3 class=\"text-xl font-semibold mb-4\">Çokgen alanı için ayakkabı bağı formülü</h3>        <p class=\"mb-4\">Herhangi bir çokgenin (normal veya düzensiz) alanını hesaplamak için, Surveyor Formülü veya Gauss'un alan formülü olarak da bilinen Shoelace Formülünü kullanacağız.Bu güçlü algoritma, şeklin ne kadar karmaşık olabileceğine bakılmaksızın, köşeleri tarafından tanımlanan herhangi bir çokgen için çalışır.</p>        <p class=\"mb-4\">Formül şu şekilde ifade edilir:</p>        <div class=\"bg-gray-100 p-4 rounded-lg mb-6\">          <code>Area = 0.5 * |∑(x_i * y_(i+1) - x_(i+1) * y_i)|</code>      </div>        <p class=\"mb-4\">Nerede:</p>      <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\"><code>x_i</code> and <code>y_i</code> are the coordinates of the i-th vertex</li>          <li class=\"mb-2\">Formül, bitişik köşelerin çapraz ürünlerinin toplamının yarısını hesaplar</li>          <li class=\"mb-2\">Mutlak değer pozitif bir alan sağlar</li>      </ul>        <p class=\"mb-4\">Bu formül, birbirini izleyen noktalar arasında çapraz ürünleri hesaplayarak çokgenin çevresi etrafında \"yürürken\" çalışır.Bunları özetlediğimizde ve 2'ye böldüğümüzde, çokgenin alanını alıyoruz.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Proje kurulumu</h2>        <p class=\"mb-4\">Geometri hesap makinemizin temel yapısını kurarak başlayalım:</p>        <h3 class=\"text-xl font-semibold mb-4\">HTML yapısı</h3>        <p class=\"mb-4\">Create a new file named <code>index.html</code> with the following structure:</p>        <pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;  &lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;      &lt;meta charset=&quot;UTF-8&quot;&gt;      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;      &lt;title&gt;Geometry Area Calculator&lt;/title&gt;      &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;  &lt;/head&gt;  &lt;body&gt;      &lt;div class=&quot;calculator-container&quot;&gt;          &lt;h1&gt;Geometry Area Calculator&lt;/h1&gt;                    &lt;div class=&quot;input-section&quot;&gt;              &lt;h2&gt;Enter Polygon Coordinates&lt;/h2&gt;              &lt;p&gt;Click on the canvas to add points or enter them manually below.&lt;/p&gt;                            &lt;div class=&quot;canvas-container&quot;&gt;                  &lt;canvas id=&quot;polygon-canvas&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;                  &lt;button id=&quot;clear-canvas&quot;&gt;Clear Canvas&lt;/button&gt;              &lt;/div&gt;                            &lt;div class=&quot;manual-input&quot;&gt;                  &lt;div class=&quot;coordinates-container&quot; id=&quot;coordinates-list&quot;&gt;                      &lt;div class=&quot;coordinate-pair&quot;&gt;                          &lt;input type=&quot;number&quot; placeholder=&quot;X1&quot; class=&quot;x-coord&quot;&gt;                          &lt;input type=&quot;number&quot; placeholder=&quot;Y1&quot; class=&quot;y-coord&quot;&gt;                          &lt;button class=&quot;remove-point&quot;&gt;×&lt;/button&gt;                      &lt;/div&gt;                  &lt;/div&gt;                  &lt;button id=&quot;add-point&quot;&gt;Add Point&lt;/button&gt;              &lt;/div&gt;                            &lt;div class=&quot;units-selection&quot;&gt;                  &lt;label for=&quot;units&quot;&gt;Measurement Units:&lt;/label&gt;                  &lt;select id=&quot;units&quot;&gt;                      &lt;option value=&quot;pixels&quot;&gt;Pixels&lt;/option&gt;                      &lt;option value=&quot;meters&quot;&gt;Meters&lt;/option&gt;                      &lt;option value=&quot;feet&quot;&gt;Feet&lt;/option&gt;                  &lt;/select&gt;              &lt;/div&gt;                            &lt;button id=&quot;calculate-area&quot;&gt;Calculate Area&lt;/button&gt;          &lt;/div&gt;                    &lt;div class=&quot;results-section&quot; id=&quot;results&quot;&gt;              &lt;!-- Results will be displayed here --&gt;          &lt;/div&gt;      &lt;/div&gt;            &lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;  &lt;/body&gt;  &lt;/html&gt;</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">CSS stil</h3>        <p class=\"mb-4\">Create a file named <code>styles.css</code> for styling our calculator:</p>        <pre><code class=\"language-css\">* {      box-sizing: border-box;      margin: 0;      padding: 0;      font-family: &#x27;Segoe UI&#x27;, Tahoma, Geneva, Verdana, sans-serif;  }    body {      background-color: #f5f5f5;      padding: 20px;  }    .calculator-container {      max-width: 800px;      margin: 0 auto;      background-color: white;      padding: 30px;      border-radius: 10px;      box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);  }    h1 {      text-align: center;      color: #333;      margin-bottom: 30px;  }    h2 {      font-size: 1.5rem;      margin-bottom: 15px;      color: #444;  }    p {      margin-bottom: 20px;      color: #666;  }    .canvas-container {      margin-bottom: 30px;      text-align: center;  }    canvas {      border: 1px solid #ccc;      background-color: #f9f9f9;  }    .manual-input {      margin-bottom: 25px;  }    .coordinates-container {      max-height: 200px;      overflow-y: auto;      margin-bottom: 15px;  }    .coordinate-pair {      display: flex;      margin-bottom: 8px;      align-items: center;  }    input {      width: 80px;      padding: 8px;      margin-right: 10px;      border: 1px solid #ccc;      border-radius: 4px;  }    button {      padding: 8px 15px;      background-color: #4CAF50;      color: white;      border: none;      border-radius: 4px;      cursor: pointer;      transition: background-color 0.3s;  }    button:hover {      background-color: #45a049;  }    .remove-point {      background-color: #f44336;      padding: 8px 12px;  }    .remove-point:hover {      background-color: #d32f2f;  }    #clear-canvas {      margin-top: 10px;  }    .units-selection {      margin-bottom: 25px;  }    select {      padding: 8px;      border: 1px solid #ccc;      border-radius: 4px;  }    .results-section {      margin-top: 30px;      padding: 20px;      background-color: #f0f8ff;      border-radius: 6px;      display: none;  }    .results-section.active {      display: block;  }    .area-result {      font-size: 1.3rem;      margin-bottom: 15px;  }    .calculation-steps {      margin-top: 20px;      padding: 15px;      background-color: #f5f5f5;      border-radius: 4px;      font-family: monospace;  }</code></pre>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">JavaScript uygulaması</h2>        <p class=\"mb-4\">Now, let's create the <code>script.js</code> file that will power our <strong>geometry area              calculator</strong>:</p>        <pre><code class=\"language-javascript\">// DOM Elements  const canvas = document.getElementById(&#x27;polygon-canvas&#x27;);  const ctx = canvas.getContext(&#x27;2d&#x27;);  const clearCanvasBtn = document.getElementById(&#x27;clear-canvas&#x27;);  const addPointBtn = document.getElementById(&#x27;add-point&#x27;);  const coordinatesList = document.getElementById(&#x27;coordinates-list&#x27;);  const calculateBtn = document.getElementById(&#x27;calculate-area&#x27;);  const resultsSection = document.getElementById(&#x27;results&#x27;);  const unitsSelect = document.getElementById(&#x27;units&#x27;);    // Global Variables  let points = [];  let isDragging = false;  let dragIndex = -1;    // Canvas Setup  function setupCanvas() {      // Set canvas coordinate system (origin at center)      ctx.translate(canvas.width / 2, canvas.height / 2);      drawGrid();            // Event listeners for canvas interaction      canvas.addEventListener(&#x27;mousedown&#x27;, handleMouseDown);      canvas.addEventListener(&#x27;mousemove&#x27;, handleMouseMove);      canvas.addEventListener(&#x27;mouseup&#x27;, () =&gt; isDragging = false);            // Redraw canvas initially      redrawCanvas();  }    // Draw coordinate grid  function drawGrid() {      const width = canvas.width;      const height = canvas.height;            ctx.strokeStyle = &#x27;#e0e0e0&#x27;;      ctx.lineWidth = 1;            // Vertical lines      for (let x = -width/2; x &lt;= width/2; x += 20) {          ctx.beginPath();          ctx.moveTo(x, -height/2);          ctx.lineTo(x, height/2);          ctx.stroke();      }            // Horizontal lines      for (let y = -height/2; y &lt;= height/2; y += 20) {          ctx.beginPath();          ctx.moveTo(-width/2, y);          ctx.lineTo(width/2, y);          ctx.stroke();      }            // X and Y axes (darker)      ctx.strokeStyle = &#x27;#aaa&#x27;;      ctx.lineWidth = 2;            // X-axis      ctx.beginPath();      ctx.moveTo(-width/2, 0);      ctx.lineTo(width/2, 0);      ctx.stroke();            // Y-axis      ctx.beginPath();      ctx.moveTo(0, -height/2);      ctx.lineTo(0, height/2);      ctx.stroke();  }    // Handle mouse down event on canvas  function handleMouseDown(e) {      const rect = canvas.getBoundingClientRect();      const scaleX = canvas.width / rect.width;      const scaleY = canvas.height / rect.height;            const canvasX = (e.clientX - rect.left) * scaleX - canvas.width / 2;      const canvasY = (e.clientY - rect.top) * scaleY - canvas.height / 2;            // Check if clicking near an existing point (for dragging)      for (let i = 0; i &lt; points.length; i++) {          const dx = points[i].x - canvasX;          const dy = points[i].y - canvasY;          const distance = Math.sqrt(dx * dx + dy * dy);                    if (distance &lt; 10) {              isDragging = true;              dragIndex = i;              return;          }      }            // If not dragging, add a new point      points.push({x: canvasX, y: canvasY});      updateCoordinateInputs();      redrawCanvas();  }    // Handle mouse move event on canvas  function handleMouseMove(e) {      if (!isDragging || dragIndex === -1) return;            const rect = canvas.getBoundingClientRect();      const scaleX = canvas.width / rect.width;      const scaleY = canvas.height / rect.height;            const canvasX = (e.clientX - rect.left) * scaleX - canvas.width / 2;      const canvasY = (e.clientY - rect.top) * scaleY - canvas.height / 2;            points[dragIndex] = {x: canvasX, y: canvasY};      updateCoordinateInputs();      redrawCanvas();  }    // Redraw the canvas with all points and connections  function redrawCanvas() {      // Clear the canvas      ctx.clearRect(-canvas.width/2, -canvas.height/2, canvas.width, canvas.height);            // Redraw the grid      drawGrid();            if (points.length === 0) return;            // Draw the polygon      ctx.beginPath();      ctx.moveTo(points[0].x, points[0].y);            for (let i = 1; i &lt; points.length; i++) {          ctx.lineTo(points[i].x, points[i].y);      }            // Connect back to the first point if we have at least 3 points      if (points.length &gt;= 3) {          ctx.lineTo(points[0].x, points[0].y);                    // Fill the polygon with a semi-transparent color          ctx.fillStyle = &#x27;rgba(76, 175, 80, 0.2)&#x27;;          ctx.fill();      }            // Draw the polygon outline      ctx.strokeStyle = &#x27;#4CAF50&#x27;;      ctx.lineWidth = 2;      ctx.stroke();            // Draw the points      for (let i = 0; i &lt; points.length; i++) {          ctx.beginPath();          ctx.arc(points[i].x, points[i].y, 5, 0, Math.PI * 2);          ctx.fillStyle = &#x27;#4CAF50&#x27;;          ctx.fill();                    // Label the points          ctx.fillStyle = &#x27;#333&#x27;;          ctx.font = &#x27;12px Arial&#x27;;          ctx.fillText(`P${i+1}`, points[i].x + 8, points[i].y - 8);      }  }    // Update the coordinate inputs based on canvas points  function updateCoordinateInputs() {      // Clear all existing inputs      coordinatesList.innerHTML = &#x27;&#x27;;            // Add new inputs for each point      for (let i = 0; i &lt; points.length; i++) {          const pair = document.createElement(&#x27;div&#x27;);          pair.className = &#x27;coordinate-pair&#x27;;                    const xInput = document.createElement(&#x27;input&#x27;);          xInput.type = &#x27;number&#x27;;          xInput.className = &#x27;x-coord&#x27;;          xInput.placeholder = `X${i+1}`;          xInput.value = Math.round(points[i].x);          xInput.dataset.index = i;                    const yInput = document.createElement(&#x27;input&#x27;);          yInput.type = &#x27;number&#x27;;          yInput.className = &#x27;y-coord&#x27;;          yInput.placeholder = `Y${i+1}`;          yInput.value = Math.round(points[i].y);          yInput.dataset.index = i;                    const removeBtn = document.createElement(&#x27;button&#x27;);          removeBtn.className = &#x27;remove-point&#x27;;          removeBtn.textContent = &#x27;×&#x27;;          removeBtn.dataset.index = i;                    pair.appendChild(xInput);          pair.appendChild(yInput);          pair.appendChild(removeBtn);          coordinatesList.appendChild(pair);                    // Event listeners for manual input changes          xInput.addEventListener(&#x27;change&#x27;, updatePointFromInput);          yInput.addEventListener(&#x27;change&#x27;, updatePointFromInput);          removeBtn.addEventListener(&#x27;click&#x27;, removePoint);      }  }    // Update a point from manual input  function updatePointFromInput(e) {      const index = parseInt(e.target.dataset.index);      const value = parseFloat(e.target.value);            if (isNaN(value)) return;            if (e.target.className === &#x27;x-coord&#x27;) {          points[index].x = value;      } else {          points[index].y = value;      }            redrawCanvas();  }    // Remove a point  function removePoint(e) {      const index = parseInt(e.target.dataset.index);      points.splice(index, 1);      updateCoordinateInputs();      redrawCanvas();  }    // Add a new point via button  function addNewPoint() {      // Add a new point at (0, 0) or near the last point if one exists      if (points.length &gt; 0) {          const lastPoint = points[points.length - 1];          points.push({x: lastPoint.x + 20, y: lastPoint.y + 20});      } else {          points.push({x: 0, y: 0});      }            updateCoordinateInputs();      redrawCanvas();  }    // Clear all points  function clearCanvas() {      points = [];      updateCoordinateInputs();      redrawCanvas();      resultsSection.style.display = &#x27;none&#x27;;  }    // Calculate area using the Shoelace formula  function calculatePolygonArea(vertices) {      if (vertices.length &lt; 3) return 0;            let area = 0;      const n = vertices.length;            for (let i = 0; i &lt; n; i++) {          const j = (i + 1) % n;          area += vertices[i].x * vertices[j].y;          area -= vertices[j].x * vertices[i].y;      }            return Math.abs(area / 2);  }    // Display the calculation results  function displayResults() {      if (points.length &lt; 3) {          alert(&quot;You need at least 3 points to calculate area.&quot;);          return;      }            const area = calculatePolygonArea(points);      const selectedUnit = unitsSelect.value;            let unitSymbol = &#x27;px²&#x27;;      let convertedArea = area;            // Apply unit conversions if needed      if (selectedUnit === &#x27;meters&#x27;) {          unitSymbol = &#x27;m²&#x27;;          // Assuming 1 pixel = 0.01 meter for example          convertedArea = area * 0.0001;      } else if (selectedUnit === &#x27;feet&#x27;) {          unitSymbol = &#x27;ft²&#x27;;          // Assuming 1 pixel = 0.0328 feet          convertedArea = area * 0.001;      }            // Format the result      const formattedArea = convertedArea.toFixed(2);            // Create the result HTML      let resultHTML = `          &lt;h2&gt;Calculation Results&lt;/h2&gt;          &lt;div class=&quot;area-result&quot;&gt;              &lt;strong&gt;Polygon Area:&lt;/strong&gt; ${formattedArea} ${unitSymbol}          &lt;/div&gt;          &lt;p&gt;Based on ${points.length} vertices&lt;/p&gt;                    &lt;div class=&quot;calculation-steps&quot;&gt;              &lt;h3&gt;Calculation Steps:&lt;/h3&gt;              &lt;p&gt;Using the Shoelace formula: A = 0.5 × |∑(xᵢyᵢ₊₁ − xᵢ₊₁yᵢ)|&lt;/p&gt;              &lt;ol&gt;      `;            // Add the calculation steps      for (let i = 0; i &lt; points.length; i++) {          const j = (i + 1) % points.length;          const term = (points[i].x * points[j].y - points[j].x * points[i].y).toFixed(2);          resultHTML += `&lt;li&gt;Step ${i+1}: (${points[i].x} × ${points[j].y}) - (${points[j].x} × ${points[i].y}) = ${term}&lt;/li&gt;`;      }            resultHTML += `              &lt;/ol&gt;              &lt;p&gt;Summing all steps and taking absolute value: ${Math.abs(area).toFixed(2)}&lt;/p&gt;              &lt;p&gt;Dividing by 2: ${(Math.abs(area)/2).toFixed(2)}&lt;/p&gt;          &lt;/div&gt;      `;            resultsSection.innerHTML = resultHTML;      resultsSection.style.display = &#x27;block&#x27;;      resultsSection.scrollIntoView({ behavior: &#x27;smooth&#x27; });  }    // Initialize the application  function init() {      setupCanvas();            // Event listeners      clearCanvasBtn.addEventListener(&#x27;click&#x27;, clearCanvas);      addPointBtn.addEventListener(&#x27;click&#x27;, addNewPoint);      calculateBtn.addEventListener(&#x27;click&#x27;, displayResults);  }    // Start the app when the page loads  window.addEventListener(&#x27;load&#x27;, init);</code></pre>        <img src=\"https://cdn.statically.io/gh/quanna1210/calculators.im-content/refs/heads/master/upload/image/19/image-2.jpg\"          alt=\"Polygon Area Calculation with Shoelace Formula\" class=\"w-full rounded-lg shadow-md mb-4\" loading=\"lazy\"          width=\"1200\" height=\"1200\">        <p class=\"text-sm text-gray-600 italic mb-6\">Ayakkabı formülünün bir çokgen alanını nasıl hesapladığının görsel temsili</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Anahtar bileşenleri anlamak</h2>        <p class=\"mb-4\">Geometri alanı hesap makinemizin ana bileşenlerini parçalayalım:</p>        <h3 class=\"text-xl font-semibold mb-4\">Tuval etkileşimi</h3>        <p class=\"mb-4\">Hesap makinemiz, etkileşimli çokgen oluşturma için bir HTML tuval öğesi kullanır.Kullanıcılar:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Puan eklemek için tuval üzerine tıklayın</li>          <li class=\"mb-2\">Pozisyonları ayarlamak için mevcut noktaları sürükleyin</li>          <li class=\"mb-2\">Çokgenin gerçek zamanlı görselleştirmesine bakın</li>          <li class=\"mb-2\">Referans için bir koordinat ızgarasını görüntüleyin</li>      </ol>        <p class=\"mb-4\">Tuval, (0,0) merkezde olduğu bir koordinat sistemi ile kurulur ve bu da kullanıcıların hem olumlu hem de olumsuz koordinatlarla çalışmasını sezgisel hale getirir.</p>        <h3 class=\"text-xl font-semibold mb-4\">Giriş yönetimini koordine edin</h3>        <p class=\"mb-4\">Kullanıcılar koordinatları iki şekilde girebilir:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Görsel Giriş: Puanları yerleştirmek için doğrudan tuval üzerine tıklayın</li>          <li class=\"mb-2\">Manuel Giriş: Giriş alanlarına kesin koordinatları girin</li>      </ol>        <p class=\"mb-4\">İki giriş yöntemi, hem sezgisel görsel yerleşime hem de hassas sayısal girişe izin veren senkronize edilir.</p>        <h3 class=\"text-xl font-semibold mb-4\">Shoelace Algoritması uygulaması</h3>        <p class=\"mb-4\">Hesap makinemizin çekirdeği, Shoelace formülünün uygulanmasıdır:</p>        <pre><code class=\"language-javascript\">function calculatePolygonArea(vertices) {      if (vertices.length &lt; 3) return 0;            let area = 0;      const n = vertices.length;            for (let i = 0; i &lt; n; i++) {          const j = (i + 1) % n;          area += vertices[i].x * vertices[j].y;          area -= vertices[j].x * vertices[i].y;      }            return Math.abs(area / 2);  }</code></pre>        <p class=\"mb-4\">Bu işlev:</p>      <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Bir dizi tepe koordinatını alır</li>          <li class=\"mb-2\">Her noktadan ve bir sonraki noktada döngüler (ilk noktaya sarılıyor)</li>          <li class=\"mb-2\">Çapraz ürün hesaplamasını uygular</li>          <li class=\"mb-2\">Mutlak değeri alır ve son alanı elde etmek için 2'ye bölünür</li>      </ol>        <p class=\"mb-4\">Bu algoritmanın güzelliği, kendisini kesişmediği sürece dışbükey veya içbükey olup olmadığına bakılmaksızın herhangi bir çokgen için çalışmasıdır.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Gelişmiş Özellikler Ekleme</h2>        <p class=\"mb-4\">Artık temel hesap makinesine sahip olduğumuza göre, bazı gelişmiş özelliklerle genişletelim:</p>        <h3 class=\"text-xl font-semibold mb-4\">Birim dönüşüm</h3>        <p class=\"mb-4\">Hesap makinemiz farklı ölçüm birimlerini destekler:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Pikseller: Ekran tabanlı ölçümler için</li>          <li class=\"mb-2\">Metre: Gerçek dünyadaki metrik ölçümler için</li>          <li class=\"mb-2\">Ayaklar: İmparatorluk ölçümleri için</li>      </ol>        <p class=\"mb-4\">Birim dönüşümü alan hesaplamasından sonra uygulanır:</p>        <pre><code class=\"language-javascript\">// Apply unit conversions if needed  if (selectedUnit === &#x27;meters&#x27;) {      unitSymbol = &#x27;m²&#x27;;      // Assuming 1 pixel = 0.01 meter for example      convertedArea = area * 0.0001;  } else if (selectedUnit === &#x27;feet&#x27;) {      unitSymbol = &#x27;ft²&#x27;;      // Assuming 1 pixel = 0.0328 feet      convertedArea = area * 0.001;  }</code></pre>        <p class=\"mb-4\">Dönüşüm faktörlerini özel gereksinimlerinize göre özelleştirebilirsiniz.</p>        <img src=\"https://cdn.statically.io/gh/quanna1210/calculators.im-content/refs/heads/master/upload/image/19/image-3.jpg\"          alt=\"Unit Conversion Interface\" class=\"w-full rounded-lg shadow-md mb-4\" loading=\"lazy\" width=\"1200\"          height=\"1200\">        <p class=\"text-sm text-gray-600 italic mb-6\">Farklı ölçüm sistemleri için birim dönüşüm seçeneklerini gösteren hesap makinesi arayüzü</p>        <h3 class=\"text-xl font-semibold mb-4\">Ayrıntılı hesaplama adımları</h3>        <p class=\"mb-4\">Kullanıcıların alanın nasıl hesaplandığını anlamalarına yardımcı olmak için hesaplama adımlarının ayrıntılı bir şekilde dökülmesini sağlıyoruz:</p>        <pre><code class=\"language-javascript\">// Add the calculation steps  for (let i = 0; i &lt; points.length; i++) {      const j = (i + 1) % points.length;      const term = (points[i].x * points[j].y - points[j].x * points[i].y).toFixed(2);      resultHTML += `&lt;li&gt;Step ${i+1}: (${points[i].x} × ${points[j].y}) - (${points[j].x} × ${points[i].y}) = ${term}&lt;/li&gt;`;  }</code></pre>        <p class=\"mb-4\">Bu şeffaflık, kullanıcıların sonuçları doğrulamasına ve poligon alan hesaplamalarının arkasındaki matematiksel prensipleri öğrenmelerine yardımcı olur.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Test ve Doğrulama</h2>        <p class=\"mb-4\">Geometri hesap makinemizi tamamlamadan önce, doğruluğunu doğrulamak için bilinen bazı şekillerle test edelim:</p>        <h3 class=\"text-xl font-semibold mb-4\">Test Olgu 1: Dikdörtgen</h3>        <p class=\"mb-4\">(0,0), (100,0), (100,50) ve (0,50) 'deki köşeleri olan basit bir dikdörtgenin 5.000 kare bir üniteye sahip olması gerekir.</p>        <h3 class=\"text-xl font-semibold mb-4\">Test Olgu 2: Üçgen</h3>        <p class=\"mb-4\">(0,0), (50,100) ve (100,0) 'da köşeli bir üçgenin 5.000 kare birimden oluşan bir alana sahip olması gerekir.</p>        <h3 class=\"text-xl font-semibold mb-4\">Test Durumu 3: Düzensiz çokgen</h3>        <p class=\"mb-4\">(0,0), (50,100), (100,50), (75,25) ve (25,25) 'de köşe olan düzensiz bir çokgen bize Shoelace formülüne dayanan doğru alanı vermelidir.</p>        <p class=\"mb-4\">Her test durumu için hesap makinemiz:</p>      <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Test koordinatlarının kolay girişine izin verin</li>          <li class=\"mb-2\">Doğru alanı hesaplayın</li>          <li class=\"mb-2\">Doğrulama için hesaplama adımlarını görüntüleyin</li>      </ol>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Mobil cihazlar için optimize etme</h2>        <p class=\"mb-4\">Geometri hesap makinemizi tamamen duyarlı hale getirmek için aşağıdaki geliştirmeleri ekleyebiliriz:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Tuval etkileşimi için Destek Desteği</li>          <li class=\"mb-2\">Farklı ekran boyutlarına uyum sağlayan duyarlı düzen</li>          <li class=\"mb-2\">Daha küçük ekranlar için basitleştirilmiş arayüz</li>      </ol>        <p class=\"mb-4\">Bu eklemeler, hesap makinemizin akıllı telefonlarda ve tabletlerde kullanılabilir olmasını sağlar ve bu da onu tüm cihazlardaki kullanıcılar için erişilebilir hale getirir.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Ek geliştirmeler</h2>        <p class=\"mb-4\">Geometri alanı hesap makinemizi daha da sağlam hale getirmek için bu ek özellikleri uygulamayı düşünün:</p>        <h3 class=\"text-xl font-semibold mb-4\">Önceden ayarlanmış şekiller</h3>        <p class=\"mb-4\">Hızlı bir şekilde ortak şekiller oluşturmak için düğmeler ekleyin:</p>      <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Kare</li>          <li class=\"mb-2\">Dikdörtgen</li>          <li class=\"mb-2\">Üçgen</li>          <li class=\"mb-2\">Daire (normal bir çokgen olarak yaklaştırılır)</li>          <li class=\"mb-2\">Normal çokgenler (Pentagon, Altıgen, vb.)</li>      </ul>        <h3 class=\"text-xl font-semibold mb-4\">Çevreler için alan hesaplaması</h3>        <p class=\"mb-4\">Hesap makinesini aşağıdakileri kullanarak daire alanlarını işlemek için genişletin:</p>      <pre><code class=\"language-javascript\">function calculateCircleArea(radius) {      return Math.PI * radius * radius;  }</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">Çevre hesaplaması</h3>        <p class=\"mb-4\">Çokgenlerin çevresini hesaplamak için işlevsellik ekleyin:</p>      <pre><code class=\"language-javascript\">function calculatePolygonPerimeter(vertices) {      let perimeter = 0;      const n = vertices.length;            for (let i = 0; i &lt; n; i++) {          const j = (i + 1) % n;          const dx = vertices[j].x - vertices[i].x;          const dy = vertices[j].y - vertices[i].y;          perimeter += Math.sqrt(dx * dx + dy * dy);      }            return perimeter;  }</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">Çokgen tasarrufu ve yükleme</h3>        <p class=\"mb-4\">Çokgen yapılandırmalarını kaydetmek ve yüklemek için LocalStorage'ı uygulayın:</p>      <pre><code class=\"language-javascript\">// Save polygon  function savePolygon(name) {      const polygonData = JSON.stringify(points);      localStorage.setItem(`polygon_${name}`, polygonData);  }    // Load polygon  function loadPolygon(name) {      const polygonData = localStorage.getItem(`polygon_${name}`);      if (polygonData) {          points = JSON.parse(polygonData);          updateCoordinateInputs();          redrawCanvas();      }  }</code></pre>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Pratik uygulamalar</h2>        <img src=\"https://cdn.statically.io/gh/quanna1210/calculators.im-content/refs/heads/master/upload/image/19/image-4.jpg\"          alt=\"Real-world Applications of Geometry Calculators\" class=\"w-full rounded-lg shadow-md mb-4\" width=\"800\"          height=\"1200\">        <p class=\"text-sm text-gray-600 italic mb-6\">Geometri alanı hesaplayıcılarının değerli çözümler sağladığı çeşitli gerçek dünya uygulamaları</p>        <p class=\"mb-4\">JavaScript Geometri Alanı Hesap Makinemizde çok sayıda pratik uygulamaya sahiptir:</p>        <h3 class=\"text-xl font-semibold mb-4\">Web Geliştirme</h3>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Etkileşimli haritalar ve çizim görselleştirmeleri</li>          <li class=\"mb-2\">Arazi Araştırma Uygulamaları</li>          <li class=\"mb-2\">Emlak Planlama Araçları</li>          <li class=\"mb-2\">Oda Düzeni ve Tasarım Uygulamaları</li>      </ul>        <h3 class=\"text-xl font-semibold mb-4\">Eğitim</h3>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Geometrik ilkeleri etkileşimli olarak öğretmek</li>          <li class=\"mb-2\">Matematiksel kavramları görselleştirme</li>          <li class=\"mb-2\">Etkileşimli Öğrenme Kaynakları Oluşturma</li>      </ul>        <h3 class=\"text-xl font-semibold mb-4\">Oyun geliştirme</h3>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Oyun nesneleri için çarpışma tespiti</li>          <li class=\"mb-2\">Seviye Tasarım ve Çevre Yaratılması</li>          <li class=\"mb-2\">Oyun dünyalarının prosedürel üretimi</li>      </ul>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Çözüm</h2>        <p class=\"mb-4\">Bu kapsamlı öğreticide, JavaScript kullanarak güçlü, etkileşimli bir geometri alan hesap makinesi oluşturduk.Hesap makinemiz şunları yapabilir:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Shoelace formülünü kullanarak herhangi bir çokgen alanını doğru bir şekilde hesaplayın</li>          <li class=\"mb-2\">Şekiller oluşturmak ve değiştirmek için sezgisel bir görsel arayüz sağlayın</li>          <li class=\"mb-2\">Kesin ölçümler için manuel koordinat girişini destekleyin</li>          <li class=\"mb-2\">Farklı ölçüm birimleri arasında dönüşüm</li>          <li class=\"mb-2\">Eğitim amaçlı ayrıntılı hesaplama adımlarını gösterin</li>      </ol>        <p class=\"mb-4\">Kapsadığımız ilkeler ve teknikler - geometri, ayakkabı bağı algoritması, tuval manipülasyonu ve kullanıcı arayüzü tasarımı - bu projenin ötesine uzanan değerli becerilerdir.Bunları veri görselleştirmesinden etkileşimli uygulamalara kadar çeşitli web geliştirme zorluklarına uygulayabilirsiniz.</p>        <p class=\"mb-4\">Bu geometri hesap makinesini oluşturarak, sadece yararlı bir araç oluşturmakla kalmadınız, aynı zamanda matematiksel kavramlar ve bunların JavaScript'teki uygulanmasını anlamanızı da derinleştirdiniz.Hesap makinesini ek özelliklerle genişletmek, performansını optimize etmek veya kendi projelerinize entegre etmekten çekinmeyin.</p>        <p class=\"mb-4\">Mutlu kodlama!</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Daha fazla öğrenme için kaynaklar</h2>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\" title=\"MDN Web Dokümanlar: Canvas API\" target=\"_blank\" rel=\"nofollow\">MDN Web Dokümanlar: Canvas API</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://www.khanacademy.org/math/basic-geo/basic-geo-coord-plane\" title=\"Khan Academy: Koordinat Geometrisi\" target=\"_blank\" rel=\"nofollow\">Khan Academy: Koordinat Geometrisi</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://en.wikipedia.org/wiki/Shoelace_formula\" title=\"Wikipedia: Ayakkabı Formülü\" target=\"_blank\" rel=\"nofollow\">Wikipedia: Ayakkabı Formülü</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://www.youtube.com/watch?v=AmM_5-o40sQ\" title=\"Matematiksel görselleştirme için JavaScript\" target=\"_blank\" rel=\"nofollow\">Matematiksel görselleştirme için JavaScript</a></li>      </ul>  </section>"
}