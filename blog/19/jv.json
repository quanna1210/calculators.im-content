{
    "trans": "<p class=\"text-gray-700 italic mb-4\">Pandhuan sing jero kanggo nggawe kalkulator geometri interaktif dhewe nggunakake JavaScript, lengkap karo petungan area kanggo polygon sing gampang lan kompleks.</p>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Pambuka: Napa mbangun kalkulator geometri?</h2>        <p class=\"mb-4\">Kalkulasi geometry mbentuk dhasar aplikasi nyata-dunia - saka survey lan arsitektur kanggo game pangembangan game lan sistem informasi geografis.Minangka pangembang, kita asring mbutuhake alat sing bisa dipercaya kanggo ngetung ing macem-macem bentuk.Nalika ana kalkulator online sing kasedhiya, mbangun dhewe nawakake sawetara kaluwihan:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Kustomisasi lengkap kanggo cocog karo syarat proyek tartamtu sampeyan</li>          <li class=\"mb-2\">Keluwesan Integrasi Kanthi aplikasi Web sing wis ana</li>          <li class=\"mb-2\">Sinau kesempatan kanggo ngerti koordinasi geometri lan pikirane algoritma</li>          <li class=\"mb-2\">Peningkatan Portofolio kanggo nampilake katrampilan Javascript sampeyan</li>      </ol>        <p class=\"mb-4\">Ing tutorial komprehensif iki, kita bakal mlaku liwat proses ngasilake kalkulator area geometry sing kuat kanthi nggunakake JavaScript.Ing pungkasan, sampeyan bakal duwe aplikasi web kanthi fungsional kanthi kanthi tepat kanthi tepat saka polygons sing gampang lan kompleks nggunakake koordinasi geometri.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Apa sing bakal kita lakoni</h2>        <p class=\"mb-4\">Kalkulator geometri kita bakal:</p>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Ngidini pangguna kanggo input koordinat poligon liwat antarmuka intuisi</li>          <li class=\"mb-2\">Ngetung wilayah kanggo poligon sing biasa lan ora teratur</li>          <li class=\"mb-2\">Ndhukung pirang-pirang unit pangukuran</li>          <li class=\"mb-2\">Nggambarake bentuk kanthi nggunakake kanvas HTML</li>          <li class=\"mb-2\">Nyedhiyakake asil sing tepat lan akurat kanthi bunder sing tepat</li>          <li class=\"mb-2\">Makarya ing kabeh browser lan piranti utama</li>      </ul>        <img src=\"https://static.calculators.im/upload/image/19/image-1.jpg\"          alt=\"Geometry Area Calculator Interface\" class=\"w-full rounded-lg shadow-md mb-4\" loading=\"lazy\" width=\"1200\"          height=\"1200\">        <p class=\"text-sm text-gray-600 italic mb-6\">Pratinjau Kalkulator Wilayah Geometri Pungkasan Javascript kanthi Input Polygon Interaktif</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Prasyarat</h2>        <p class=\"mb-4\">Kanggo ngetutake nganggo tutorial iki, sampeyan kudu duwe:</p>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Pangertos dhasar HTML, CSS, lan JavaScript</li>          <li class=\"mb-2\">Kenal karo manipulasi dom</li>          <li class=\"mb-2\">Editor Teks utawa ID (VS Code, Teks Sublime, lsp)</li>          <li class=\"mb-2\">Browser Web modern</li>          <li class=\"mb-2\">Opsional: Pangerten dhasar geometri koordetry</li>      </ul>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Mangertos matématika ing mburi</h2>        <p class=\"mb-4\">Sadurunge nyilem menyang kode, mula ngerti prinsip matematika sing nganakake kalkulator geometri kita.</p>        <h3 class=\"text-xl font-semibold mb-4\">Formula Shoelace kanggo Area Polygon</h3>        <p class=\"mb-4\">Kanggo ngitung area poligon (rutin utawa ora teratur), kita bakal nggunakake formula shoelace, uga dikenal minangka rumus surveyor utawa formula Area Surveyor.Algoritma sing kuat iki bisa digunakake kanggo poligon sing ditetepake kanthi vertikal, preduli saka kompleks sing bisa uga.</p>        <p class=\"mb-4\">Formula ditulis minangka:</p>        <div class=\"bg-gray-100 p-4 rounded-lg mb-6\">          <code>Area = 0.5 * |∑(x_i * y_(i+1) - x_(i+1) * y_i)|</code>      </div>        <p class=\"mb-4\">Ngendi:</p>      <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\"><code>x_i</code> and <code>y_i</code> are the coordinates of the i-th vertex</li>          <li class=\"mb-2\">Formula ngetung separo saka produk salib sing cedhak</li>          <li class=\"mb-2\">Nilai mutlak njamin area positif</li>      </ul>        <p class=\"mb-4\">Formula iki ditindakake kanthi \"mlaku-mlaku\" ing sekitar perimeter polygon, ngitung produk salib antarane poin berturut-turut.Nalika kita entuk munggah lan dibagi kanthi 2, kita entuk wilayah polygon.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Persiyapan Proyek</h2>        <p class=\"mb-4\">Ayo miwiti kanthi nyetel struktur dhasar kalkulator geometri kita:</p>        <h3 class=\"text-xl font-semibold mb-4\">Struktur HTML</h3>        <p class=\"mb-4\">Create a new file named <code>index.html</code> with the following structure:</p>        <pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;  &lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;      &lt;meta charset=&quot;UTF-8&quot;&gt;      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;      &lt;title&gt;Geometry Area Calculator&lt;/title&gt;      &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;  &lt;/head&gt;  &lt;body&gt;      &lt;div class=&quot;calculator-container&quot;&gt;          &lt;h1&gt;Geometry Area Calculator&lt;/h1&gt;                    &lt;div class=&quot;input-section&quot;&gt;              &lt;h2&gt;Enter Polygon Coordinates&lt;/h2&gt;              &lt;p&gt;Click on the canvas to add points or enter them manually below.&lt;/p&gt;                            &lt;div class=&quot;canvas-container&quot;&gt;                  &lt;canvas id=&quot;polygon-canvas&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;                  &lt;button id=&quot;clear-canvas&quot;&gt;Clear Canvas&lt;/button&gt;              &lt;/div&gt;                            &lt;div class=&quot;manual-input&quot;&gt;                  &lt;div class=&quot;coordinates-container&quot; id=&quot;coordinates-list&quot;&gt;                      &lt;div class=&quot;coordinate-pair&quot;&gt;                          &lt;input type=&quot;number&quot; placeholder=&quot;X1&quot; class=&quot;x-coord&quot;&gt;                          &lt;input type=&quot;number&quot; placeholder=&quot;Y1&quot; class=&quot;y-coord&quot;&gt;                          &lt;button class=&quot;remove-point&quot;&gt;×&lt;/button&gt;                      &lt;/div&gt;                  &lt;/div&gt;                  &lt;button id=&quot;add-point&quot;&gt;Add Point&lt;/button&gt;              &lt;/div&gt;                            &lt;div class=&quot;units-selection&quot;&gt;                  &lt;label for=&quot;units&quot;&gt;Measurement Units:&lt;/label&gt;                  &lt;select id=&quot;units&quot;&gt;                      &lt;option value=&quot;pixels&quot;&gt;Pixels&lt;/option&gt;                      &lt;option value=&quot;meters&quot;&gt;Meters&lt;/option&gt;                      &lt;option value=&quot;feet&quot;&gt;Feet&lt;/option&gt;                  &lt;/select&gt;              &lt;/div&gt;                            &lt;button id=&quot;calculate-area&quot;&gt;Calculate Area&lt;/button&gt;          &lt;/div&gt;                    &lt;div class=&quot;results-section&quot; id=&quot;results&quot;&gt;              &lt;!-- Results will be displayed here --&gt;          &lt;/div&gt;      &lt;/div&gt;            &lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;  &lt;/body&gt;  &lt;/html&gt;</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">CSS Styling</h3>        <p class=\"mb-4\">Create a file named <code>styles.css</code> for styling our calculator:</p>        <pre><code class=\"language-css\">* {      box-sizing: border-box;      margin: 0;      padding: 0;      font-family: &#x27;Segoe UI&#x27;, Tahoma, Geneva, Verdana, sans-serif;  }    body {      background-color: #f5f5f5;      padding: 20px;  }    .calculator-container {      max-width: 800px;      margin: 0 auto;      background-color: white;      padding: 30px;      border-radius: 10px;      box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);  }    h1 {      text-align: center;      color: #333;      margin-bottom: 30px;  }    h2 {      font-size: 1.5rem;      margin-bottom: 15px;      color: #444;  }    p {      margin-bottom: 20px;      color: #666;  }    .canvas-container {      margin-bottom: 30px;      text-align: center;  }    canvas {      border: 1px solid #ccc;      background-color: #f9f9f9;  }    .manual-input {      margin-bottom: 25px;  }    .coordinates-container {      max-height: 200px;      overflow-y: auto;      margin-bottom: 15px;  }    .coordinate-pair {      display: flex;      margin-bottom: 8px;      align-items: center;  }    input {      width: 80px;      padding: 8px;      margin-right: 10px;      border: 1px solid #ccc;      border-radius: 4px;  }    button {      padding: 8px 15px;      background-color: #4CAF50;      color: white;      border: none;      border-radius: 4px;      cursor: pointer;      transition: background-color 0.3s;  }    button:hover {      background-color: #45a049;  }    .remove-point {      background-color: #f44336;      padding: 8px 12px;  }    .remove-point:hover {      background-color: #d32f2f;  }    #clear-canvas {      margin-top: 10px;  }    .units-selection {      margin-bottom: 25px;  }    select {      padding: 8px;      border: 1px solid #ccc;      border-radius: 4px;  }    .results-section {      margin-top: 30px;      padding: 20px;      background-color: #f0f8ff;      border-radius: 6px;      display: none;  }    .results-section.active {      display: block;  }    .area-result {      font-size: 1.3rem;      margin-bottom: 15px;  }    .calculation-steps {      margin-top: 20px;      padding: 15px;      background-color: #f5f5f5;      border-radius: 4px;      font-family: monospace;  }</code></pre>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Implementasine javascript</h2>        <p class=\"mb-4\">Now, let's create the <code>script.js</code> file that will power our <strong>geometry area              calculator</strong>:</p>        <pre><code class=\"language-javascript\">// DOM Elements  const canvas = document.getElementById(&#x27;polygon-canvas&#x27;);  const ctx = canvas.getContext(&#x27;2d&#x27;);  const clearCanvasBtn = document.getElementById(&#x27;clear-canvas&#x27;);  const addPointBtn = document.getElementById(&#x27;add-point&#x27;);  const coordinatesList = document.getElementById(&#x27;coordinates-list&#x27;);  const calculateBtn = document.getElementById(&#x27;calculate-area&#x27;);  const resultsSection = document.getElementById(&#x27;results&#x27;);  const unitsSelect = document.getElementById(&#x27;units&#x27;);    // Global Variables  let points = [];  let isDragging = false;  let dragIndex = -1;    // Canvas Setup  function setupCanvas() {      // Set canvas coordinate system (origin at center)      ctx.translate(canvas.width / 2, canvas.height / 2);      drawGrid();            // Event listeners for canvas interaction      canvas.addEventListener(&#x27;mousedown&#x27;, handleMouseDown);      canvas.addEventListener(&#x27;mousemove&#x27;, handleMouseMove);      canvas.addEventListener(&#x27;mouseup&#x27;, () =&gt; isDragging = false);            // Redraw canvas initially      redrawCanvas();  }    // Draw coordinate grid  function drawGrid() {      const width = canvas.width;      const height = canvas.height;            ctx.strokeStyle = &#x27;#e0e0e0&#x27;;      ctx.lineWidth = 1;            // Vertical lines      for (let x = -width/2; x &lt;= width/2; x += 20) {          ctx.beginPath();          ctx.moveTo(x, -height/2);          ctx.lineTo(x, height/2);          ctx.stroke();      }            // Horizontal lines      for (let y = -height/2; y &lt;= height/2; y += 20) {          ctx.beginPath();          ctx.moveTo(-width/2, y);          ctx.lineTo(width/2, y);          ctx.stroke();      }            // X and Y axes (darker)      ctx.strokeStyle = &#x27;#aaa&#x27;;      ctx.lineWidth = 2;            // X-axis      ctx.beginPath();      ctx.moveTo(-width/2, 0);      ctx.lineTo(width/2, 0);      ctx.stroke();            // Y-axis      ctx.beginPath();      ctx.moveTo(0, -height/2);      ctx.lineTo(0, height/2);      ctx.stroke();  }    // Handle mouse down event on canvas  function handleMouseDown(e) {      const rect = canvas.getBoundingClientRect();      const scaleX = canvas.width / rect.width;      const scaleY = canvas.height / rect.height;            const canvasX = (e.clientX - rect.left) * scaleX - canvas.width / 2;      const canvasY = (e.clientY - rect.top) * scaleY - canvas.height / 2;            // Check if clicking near an existing point (for dragging)      for (let i = 0; i &lt; points.length; i++) {          const dx = points[i].x - canvasX;          const dy = points[i].y - canvasY;          const distance = Math.sqrt(dx * dx + dy * dy);                    if (distance &lt; 10) {              isDragging = true;              dragIndex = i;              return;          }      }            // If not dragging, add a new point      points.push({x: canvasX, y: canvasY});      updateCoordinateInputs();      redrawCanvas();  }    // Handle mouse move event on canvas  function handleMouseMove(e) {      if (!isDragging || dragIndex === -1) return;            const rect = canvas.getBoundingClientRect();      const scaleX = canvas.width / rect.width;      const scaleY = canvas.height / rect.height;            const canvasX = (e.clientX - rect.left) * scaleX - canvas.width / 2;      const canvasY = (e.clientY - rect.top) * scaleY - canvas.height / 2;            points[dragIndex] = {x: canvasX, y: canvasY};      updateCoordinateInputs();      redrawCanvas();  }    // Redraw the canvas with all points and connections  function redrawCanvas() {      // Clear the canvas      ctx.clearRect(-canvas.width/2, -canvas.height/2, canvas.width, canvas.height);            // Redraw the grid      drawGrid();            if (points.length === 0) return;            // Draw the polygon      ctx.beginPath();      ctx.moveTo(points[0].x, points[0].y);            for (let i = 1; i &lt; points.length; i++) {          ctx.lineTo(points[i].x, points[i].y);      }            // Connect back to the first point if we have at least 3 points      if (points.length &gt;= 3) {          ctx.lineTo(points[0].x, points[0].y);                    // Fill the polygon with a semi-transparent color          ctx.fillStyle = &#x27;rgba(76, 175, 80, 0.2)&#x27;;          ctx.fill();      }            // Draw the polygon outline      ctx.strokeStyle = &#x27;#4CAF50&#x27;;      ctx.lineWidth = 2;      ctx.stroke();            // Draw the points      for (let i = 0; i &lt; points.length; i++) {          ctx.beginPath();          ctx.arc(points[i].x, points[i].y, 5, 0, Math.PI * 2);          ctx.fillStyle = &#x27;#4CAF50&#x27;;          ctx.fill();                    // Label the points          ctx.fillStyle = &#x27;#333&#x27;;          ctx.font = &#x27;12px Arial&#x27;;          ctx.fillText(`P${i+1}`, points[i].x + 8, points[i].y - 8);      }  }    // Update the coordinate inputs based on canvas points  function updateCoordinateInputs() {      // Clear all existing inputs      coordinatesList.innerHTML = &#x27;&#x27;;            // Add new inputs for each point      for (let i = 0; i &lt; points.length; i++) {          const pair = document.createElement(&#x27;div&#x27;);          pair.className = &#x27;coordinate-pair&#x27;;                    const xInput = document.createElement(&#x27;input&#x27;);          xInput.type = &#x27;number&#x27;;          xInput.className = &#x27;x-coord&#x27;;          xInput.placeholder = `X${i+1}`;          xInput.value = Math.round(points[i].x);          xInput.dataset.index = i;                    const yInput = document.createElement(&#x27;input&#x27;);          yInput.type = &#x27;number&#x27;;          yInput.className = &#x27;y-coord&#x27;;          yInput.placeholder = `Y${i+1}`;          yInput.value = Math.round(points[i].y);          yInput.dataset.index = i;                    const removeBtn = document.createElement(&#x27;button&#x27;);          removeBtn.className = &#x27;remove-point&#x27;;          removeBtn.textContent = &#x27;×&#x27;;          removeBtn.dataset.index = i;                    pair.appendChild(xInput);          pair.appendChild(yInput);          pair.appendChild(removeBtn);          coordinatesList.appendChild(pair);                    // Event listeners for manual input changes          xInput.addEventListener(&#x27;change&#x27;, updatePointFromInput);          yInput.addEventListener(&#x27;change&#x27;, updatePointFromInput);          removeBtn.addEventListener(&#x27;click&#x27;, removePoint);      }  }    // Update a point from manual input  function updatePointFromInput(e) {      const index = parseInt(e.target.dataset.index);      const value = parseFloat(e.target.value);            if (isNaN(value)) return;            if (e.target.className === &#x27;x-coord&#x27;) {          points[index].x = value;      } else {          points[index].y = value;      }            redrawCanvas();  }    // Remove a point  function removePoint(e) {      const index = parseInt(e.target.dataset.index);      points.splice(index, 1);      updateCoordinateInputs();      redrawCanvas();  }    // Add a new point via button  function addNewPoint() {      // Add a new point at (0, 0) or near the last point if one exists      if (points.length &gt; 0) {          const lastPoint = points[points.length - 1];          points.push({x: lastPoint.x + 20, y: lastPoint.y + 20});      } else {          points.push({x: 0, y: 0});      }            updateCoordinateInputs();      redrawCanvas();  }    // Clear all points  function clearCanvas() {      points = [];      updateCoordinateInputs();      redrawCanvas();      resultsSection.style.display = &#x27;none&#x27;;  }    // Calculate area using the Shoelace formula  function calculatePolygonArea(vertices) {      if (vertices.length &lt; 3) return 0;            let area = 0;      const n = vertices.length;            for (let i = 0; i &lt; n; i++) {          const j = (i + 1) % n;          area += vertices[i].x * vertices[j].y;          area -= vertices[j].x * vertices[i].y;      }            return Math.abs(area / 2);  }    // Display the calculation results  function displayResults() {      if (points.length &lt; 3) {          alert(&quot;You need at least 3 points to calculate area.&quot;);          return;      }            const area = calculatePolygonArea(points);      const selectedUnit = unitsSelect.value;            let unitSymbol = &#x27;px²&#x27;;      let convertedArea = area;            // Apply unit conversions if needed      if (selectedUnit === &#x27;meters&#x27;) {          unitSymbol = &#x27;m²&#x27;;          // Assuming 1 pixel = 0.01 meter for example          convertedArea = area * 0.0001;      } else if (selectedUnit === &#x27;feet&#x27;) {          unitSymbol = &#x27;ft²&#x27;;          // Assuming 1 pixel = 0.0328 feet          convertedArea = area * 0.001;      }            // Format the result      const formattedArea = convertedArea.toFixed(2);            // Create the result HTML      let resultHTML = `          &lt;h2&gt;Calculation Results&lt;/h2&gt;          &lt;div class=&quot;area-result&quot;&gt;              &lt;strong&gt;Polygon Area:&lt;/strong&gt; ${formattedArea} ${unitSymbol}          &lt;/div&gt;          &lt;p&gt;Based on ${points.length} vertices&lt;/p&gt;                    &lt;div class=&quot;calculation-steps&quot;&gt;              &lt;h3&gt;Calculation Steps:&lt;/h3&gt;              &lt;p&gt;Using the Shoelace formula: A = 0.5 × |∑(xᵢyᵢ₊₁ − xᵢ₊₁yᵢ)|&lt;/p&gt;              &lt;ol&gt;      `;            // Add the calculation steps      for (let i = 0; i &lt; points.length; i++) {          const j = (i + 1) % points.length;          const term = (points[i].x * points[j].y - points[j].x * points[i].y).toFixed(2);          resultHTML += `&lt;li&gt;Step ${i+1}: (${points[i].x} × ${points[j].y}) - (${points[j].x} × ${points[i].y}) = ${term}&lt;/li&gt;`;      }            resultHTML += `              &lt;/ol&gt;              &lt;p&gt;Summing all steps and taking absolute value: ${Math.abs(area).toFixed(2)}&lt;/p&gt;              &lt;p&gt;Dividing by 2: ${(Math.abs(area)/2).toFixed(2)}&lt;/p&gt;          &lt;/div&gt;      `;            resultsSection.innerHTML = resultHTML;      resultsSection.style.display = &#x27;block&#x27;;      resultsSection.scrollIntoView({ behavior: &#x27;smooth&#x27; });  }    // Initialize the application  function init() {      setupCanvas();            // Event listeners      clearCanvasBtn.addEventListener(&#x27;click&#x27;, clearCanvas);      addPointBtn.addEventListener(&#x27;click&#x27;, addNewPoint);      calculateBtn.addEventListener(&#x27;click&#x27;, displayResults);  }    // Start the app when the page loads  window.addEventListener(&#x27;load&#x27;, init);</code></pre>        <img src=\"https://static.calculators.im/upload/image/19/image-2.jpg\"          alt=\"Polygon Area Calculation with Shoelace Formula\" class=\"w-full rounded-lg shadow-md mb-4\" loading=\"lazy\"          width=\"1200\" height=\"1200\">        <p class=\"text-sm text-gray-600 italic mb-6\">Perwakilan Visual babagan Formula Shoelace ngétung area poligon</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Ngerti komponen utama</h2>        <p class=\"mb-4\">Ayo ngilangi komponen utama kalkulator wilayah geometry kita:</p>        <h3 class=\"text-xl font-semibold mb-4\">Interaksi Canvas</h3>        <p class=\"mb-4\">Kalkulator kita nggunakake unsur kanvas HTML kanggo nggawe poligon interaktif.Pangguna bisa:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Klik ing kanvas kanggo nambah poin</li>          <li class=\"mb-2\">Seret poin sing ana kanggo nyetel posisi</li>          <li class=\"mb-2\">Deleng visualisasi wektu nyata-poligon</li>          <li class=\"mb-2\">Ndeleng kothak koordinate kanggo referensi</li>      </ol>        <p class=\"mb-4\">Kanvas nyiyapake nganggo sistem koordinasi ing ngendi (0,0) ana ing tengah, nggawe intuisi kanggo pangguna supaya bisa kerja karo koordinat positif lan negatif.</p>        <h3 class=\"text-xl font-semibold mb-4\">Koordinasi manajemen input</h3>        <p class=\"mb-4\">Pangguna bisa input koordinat kanthi rong cara:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Input Visual: klik langsung ing kanvas kanggo menehi titik</li>          <li class=\"mb-2\">Input manual: Ketik koordinat sing tepat ing kolom input</li>      </ol>        <p class=\"mb-4\">Loro metode input sing disinkronake, ngidini kanggo plancongan visual intuegi lan input angka sing tepat.</p>        <h3 class=\"text-xl font-semibold mb-4\">Algoritma algoritma implementasine</h3>        <p class=\"mb-4\">Intine kalkulator kita yaiku implementasine saka formula shoelace:</p>        <pre><code class=\"language-javascript\">function calculatePolygonArea(vertices) {      if (vertices.length &lt; 3) return 0;            let area = 0;      const n = vertices.length;            for (let i = 0; i &lt; n; i++) {          const j = (i + 1) % n;          area += vertices[i].x * vertices[j].y;          area -= vertices[j].x * vertices[i].y;      }            return Math.abs(area / 2);  }</code></pre>        <p class=\"mb-4\">Fungsi iki:</p>      <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Njupuk macem-macem koordinat vertex</li>          <li class=\"mb-2\">Puteran liwat saben titik lan titik sabanjure (mbungkus menyang titik pisanan)</li>          <li class=\"mb-2\">Nglamarake pitungan produk salib</li>          <li class=\"mb-2\">Njupuk nilai mutlak lan dibagi 2 kanggo entuk wilayah pungkasan</li>      </ol>        <p class=\"mb-4\">Kaendahan algoritma iki yaiku bisa digunakake kanggo poligon, ora preduli manawa cembung utawa convave, angger ora nyimpangake awake dhewe.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Nambah fitur canggih</h2>        <p class=\"mb-4\">Saiki kita duwe kalkulator sing bisa digunakake, ayo ditambahi karo sawetara fitur canggih:</p>        <h3 class=\"text-xl font-semibold mb-4\">Konversi unit</h3>        <p class=\"mb-4\">Kalkulator kita ndhukung macem-macem unit pangukuran:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Piksel: Kanggo pangukuran basis layar</li>          <li class=\"mb-2\">Meter: Kanggo pangukuran metrik-nyata</li>          <li class=\"mb-2\">Kaki: Kanggo pangukuran imperial</li>      </ol>        <p class=\"mb-4\">Konversi unit ditrapake sawise diétung wilayah:</p>        <pre><code class=\"language-javascript\">// Apply unit conversions if needed  if (selectedUnit === &#x27;meters&#x27;) {      unitSymbol = &#x27;m²&#x27;;      // Assuming 1 pixel = 0.01 meter for example      convertedArea = area * 0.0001;  } else if (selectedUnit === &#x27;feet&#x27;) {      unitSymbol = &#x27;ft²&#x27;;      // Assuming 1 pixel = 0.0328 feet      convertedArea = area * 0.001;  }</code></pre>        <p class=\"mb-4\">Sampeyan bisa ngatur faktor konversi adhedhasar syarat tartamtu sampeyan.</p>        <img src=\"https://static.calculators.im/upload/image/19/image-3.jpg\"          alt=\"Unit Conversion Interface\" class=\"w-full rounded-lg shadow-md mb-4\" loading=\"lazy\" width=\"1200\"          height=\"1200\">        <p class=\"text-sm text-gray-600 italic mb-6\">Antarmuka kalkulator sing nuduhake pilihan konversi unit kanggo sistem pangukuran sing beda</p>        <h3 class=\"text-xl font-semibold mb-4\">Pitungan Pitungan Detail</h3>        <p class=\"mb-4\">Kanggo mbantu pangguna ngerti kepiye wilayah kasebut diwilang, kita nyedhiyani risak langkah-langkah pitungan:</p>        <pre><code class=\"language-javascript\">// Add the calculation steps  for (let i = 0; i &lt; points.length; i++) {      const j = (i + 1) % points.length;      const term = (points[i].x * points[j].y - points[j].x * points[i].y).toFixed(2);      resultHTML += `&lt;li&gt;Step ${i+1}: (${points[i].x} × ${points[j].y}) - (${points[j].x} × ${points[i].y}) = ${term}&lt;/li&gt;`;  }</code></pre>        <p class=\"mb-4\">Transparansi iki mbantu para pangguna verifikasi asil lan sinau babagan prinsip matematika ing mburi petungan area poligon.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Tes lan Validasi</h2>        <p class=\"mb-4\">Sadurunge mikir kalkulator geometri lengkap, ayo nyoba karo sawetara bentuk sing dikenal kanggo verifikasi akurasi:</p>        <h3 class=\"text-xl font-semibold mb-4\">Kasus Tes 1: Rectangle</h3>        <p class=\"mb-4\">Rectangle sing gampang kanthi vertikal ing (0,0), (100,0), (100,0), lan (0,50) kudu duwe area 5,000 unit persegi.</p>        <h3 class=\"text-xl font-semibold mb-4\">Kasus tes 2: segitiga</h3>        <p class=\"mb-4\">Segitiga kanthi vertikal ing (0,0), (50,100), lan (100,0) kudu duwe area 5,000 unit persegi.</p>        <h3 class=\"text-xl font-semibold mb-4\">Kasus tes 3: Polygon sing ora teratur</h3>        <p class=\"mb-4\">Polygon sing ora teratur kanthi vertikal ing (0,0), (50,100), (100,5,25), (15,25), lan (25,25) kudu menehi area sing bener adhedhasar formula shoelace.</p>        <p class=\"mb-4\">Kanggo saben kasus tes, kalkulator kita kudu:</p>      <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Ngidini input koordinat tes gampang</li>          <li class=\"mb-2\">Ngetung area sing bener</li>          <li class=\"mb-2\">Tampilake langkah-langkah pitungan kanggo verifikasi</li>      </ol>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Ngoptimalake piranti seluler</h2>        <p class=\"mb-4\">Kanggo nggawe kalkulator geometri kita kanthi responsif, kita bisa nambah tambahan ing ngisor iki:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Dhukungan Tutul kanggo Interaksi Canvas</li>          <li class=\"mb-2\">Tata letak responsif sing cocog karo ukuran layar sing beda</li>          <li class=\"mb-2\">Antarmuka sing gampang kanggo layar sing luwih cilik</li>      </ol>        <p class=\"mb-4\">Ketahanan kasebut mesthekake kalkulator kita bisa digunakake ing smartphone lan tablet, bisa diakses pangguna ing kabeh piranti.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Dandan tambahan</h2>        <p class=\"mb-4\">Kanggo nggawe kalkulator area geometry kita luwih kuat, nimbang ngetrapake fitur tambahan iki:</p>        <h3 class=\"text-xl font-semibold mb-4\">Wangun prasetel</h3>        <p class=\"mb-4\">Tambah tombol kanggo nggawe bentuk kanthi cepet kaya:</p>      <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Alun-alun</li>          <li class=\"mb-2\">Rectangle</li>          <li class=\"mb-2\">Segitiga</li>          <li class=\"mb-2\">Bunder (nyedhaki minangka poligon biasa)</li>          <li class=\"mb-2\">Polisi biasa (pentagon, hexagon, lsp)</li>      </ul>        <h3 class=\"text-xl font-semibold mb-4\">Pitungan kanggo bunderan</h3>        <p class=\"mb-4\">Ngluwihi kalkulator kanggo ngatasi wilayah bunder kanthi nggunakake:</p>      <pre><code class=\"language-javascript\">function calculateCircleArea(radius) {      return Math.PI * radius * radius;  }</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">Pitungan perimeter</h3>        <p class=\"mb-4\">Tambah fungsi kanggo ngetung perimeter poligon:</p>      <pre><code class=\"language-javascript\">function calculatePolygonPerimeter(vertices) {      let perimeter = 0;      const n = vertices.length;            for (let i = 0; i &lt; n; i++) {          const j = (i + 1) % n;          const dx = vertices[j].x - vertices[i].x;          const dy = vertices[j].y - vertices[i].y;          perimeter += Math.sqrt(dx * dx + dy * dy);      }            return perimeter;  }</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">Saving and Loading Poligons</h3>        <p class=\"mb-4\">Ngleksanakake lokals kanggo nyimpen lan mbukak konfigurasi polygon:</p>      <pre><code class=\"language-javascript\">// Save polygon  function savePolygon(name) {      const polygonData = JSON.stringify(points);      localStorage.setItem(`polygon_${name}`, polygonData);  }    // Load polygon  function loadPolygon(name) {      const polygonData = localStorage.getItem(`polygon_${name}`);      if (polygonData) {          points = JSON.parse(polygonData);          updateCoordinateInputs();          redrawCanvas();      }  }</code></pre>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Aplikasi praktis</h2>        <img src=\"https://static.calculators.im/upload/image/19/image-4.jpg\"          alt=\"Real-world Applications of Geometry Calculators\" class=\"w-full rounded-lg shadow-md mb-4\" width=\"800\"          height=\"1200\">        <p class=\"text-sm text-gray-600 italic mb-6\">Macem-macem aplikasi nyata ing endi kalkulator wilayah geometri nyedhiyakake solusi sing larang regane</p>        <p class=\"mb-4\">Kalkulator area geometri Javascript kita duwe pirang-pirang aplikasi praktis:</p>        <h3 class=\"text-xl font-semibold mb-4\">Pangembangan Web</h3>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Peta Interaktif lan Visualisasi Plot</li>          <li class=\"mb-2\">Aplikasi Surveying Tanah</li>          <li class=\"mb-2\">Alat Perencanaan Real Estate</li>          <li class=\"mb-2\">Tata letak lan aplikasi desain</li>      </ul>        <h3 class=\"text-xl font-semibold mb-4\">Pendhidhikan</h3>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Mulang prinsip geometri kanthi interaktif</li>          <li class=\"mb-2\">Nggambarake konsep matématika</li>          <li class=\"mb-2\">Nggawe Sumber Pembelajaran Interaktif</li>      </ul>        <h3 class=\"text-xl font-semibold mb-4\">Pangembangan Game</h3>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\">Deteksi tabrakan kanggo obyek game</li>          <li class=\"mb-2\">Penciptaan desain lan lingkungan level</li>          <li class=\"mb-2\">Generasi Game Game Prosedur</li>      </ul>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Kesimpulan</h2>        <p class=\"mb-4\">Ing tutorial komprehensif iki, kita wis mbangun kalkulator wilayah geometry sing kuat sing nggunakake JavaScript.Kalkulator kita bisa:</p>        <ol class=\"list-decimal pl-8 mb-6\">          <li class=\"mb-2\">Ngetung tlatah poligon kanthi nggunakake formula shoelace</li>          <li class=\"mb-2\">Nyedhiyani antarmuka visual intuisi kanggo nggawe lan ngowahi wujud</li>          <li class=\"mb-2\">Ndhukung input koordinat manual kanggo pangukuran sing tepat</li>          <li class=\"mb-2\">Ngonversi ing antarane unit pangukuran sing beda</li>          <li class=\"mb-2\">Tampilake langkah pitungan rinci kanggo tujuan pendhidhikan</li>      </ol>        <p class=\"mb-4\">Prinsip lan teknik sing diwenehake geometri, algoritma shoelace, manipulasi kanvas, lan desain antarmuka pangguna - katrampilan sing migunani sing ngluwihi proyek khusus iki.Sampeyan bisa ngetrapake tantangan pembangunan web, saka visualisasi data kanggo aplikasi interaktif.</p>        <p class=\"mb-4\">Kanthi mbangun kalkulator geometri iki, sampeyan ora mung nggawe alat sing migunani, nanging uga bisa ngerteni babagan konsep matematika lan implementasine ing JavaScript.Bebas bae kanggo ngluwihi kalkulator kanthi fitur tambahan, ngoptimalake kinerja, utawa nggabungake menyang proyek sampeyan dhewe.</p>        <p class=\"mb-4\">Seneng coding!</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Sumber kanggo sinau luwih</h2>        <ul class=\"list-disc pl-8 mb-6\">          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\" title=\"DOW WEBS WEBN: Canvas API\" target=\"_blank\" rel=\"nofollow\">DOW WEBS WEBN: Canvas API</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://www.khanacademy.org/math/basic-geo/basic-geo-coord-plane\" title=\"Khan Academy: koordinasi geometri\" target=\"_blank\" rel=\"nofollow\">Khan Academy: koordinasi geometri</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://en.wikipedia.org/wiki/Shoelace_formula\" title=\"Wikipedia: Formula Shoelace\" target=\"_blank\" rel=\"nofollow\">Wikipedia: Formula Shoelace</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://www.youtube.com/watch?v=AmM_5-o40sQ\" title=\"JavaScript kanggo visualisasi matematika\" target=\"_blank\" rel=\"nofollow\">JavaScript kanggo visualisasi matematika</a></li>      </ul>  </section>"
}