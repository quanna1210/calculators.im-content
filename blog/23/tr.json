{
    "trans": "<p class=\"mb-6\">Web uygulamalarının geniş manzarasında, yaş hesap makineleri, kullanıcı deneyimini pratik işlevsellik ile köprüleyen temel araçlar olarak durmaktadır.İster bir sağlık uygulaması, ister bir kayıt formu veya özel bir doğum günü hesap makinesi geliştirin, etkili bir yaş hesap makinesinin nasıl uygulanacağını anlamak herhangi bir geliştirici için değerli bir beceridir.Bu kapsamlı kılavuz, temel yaş hesaplama formüllerinden gelişmiş uygulama tekniklerine kadar her şeyi araştırır ve size kendi özel yaş hesap makinesi web uygulamanızı oluşturma bilgisi sağlar.</p>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Yaş Hesap Makinelerini Anlamak: Temeller</h2>      <p class=\"mb-4\">Yaş hesap makinesi, bir kişinin tam yaşını veya iki tarih arasında geçen zamanı hesaplayan dijital bir araçtır.Kavram basit görünse de - bugünün tarihi ile doğum tarihi arasındaki farkın hesaplanması - proper uygulama, doğruluk ve kullanıcı memnuniyetini sağlamak için çok sayıda ayrıntıya dikkat gerektirir.</p>        <h3 class=\"text-xl font-semibold mb-4\">Modern web uygulamalarında yaş hesap makineleri neden önemlidir?</h3>      <p class=\"mb-4\">Yaş hesap makineleri çeşitli alanlarda sayısız pratik amaca hizmet eder:</p>      <ul class=\"list-disc pl-6 mb-6\">          <li class=\"mb-2\">Kullanıcı Kayıt Sistemleri: Hizmetler için yaş uygunluğunu doğrulama</li>          <li class=\"mb-2\">Sağlık Hizmetleri Uygulamaları: Tıbbi Değerlendirmeler için Kesin Yaş Hesaplama</li>          <li class=\"mb-2\">İnsan Kaynakları Platformları: İstihdam süresinin veya emeklilik uygunluğunun hesaplanması</li>          <li class=\"mb-2\">Eğitim Web Siteleri: Okul kabul uygunluğunun belirlenmesi</li>          <li class=\"mb-2\">Eğlence Uygulamaları: Yaşa Uygun İçerik Filtreleme</li>          <li class=\"mb-2\">Finansal Hizmetler: Yaşa Dayalı Finansal Planlama ve Sigorta Hesaplamaları</li>      </ul>      <p class=\"mb-4\">Bu özel kullanımların ötesinde, iyi uygulanan bir çevrimiçi yaş hesap makinesi, manuel hesaplamaları ortadan kaldırarak ve hata marjlarını azaltarak kullanıcı deneyimini geliştirir.Modern web uygulamaları, rekabet avantajını korumak için bu tür kolaylık özelliklerine giderek daha fazla öncelik vermektedir.</p>        <h3 class=\"text-xl font-semibold mb-4\">Geliştiricilerin uygulayabileceği yaş hesap makineleri türleri</h3>      <p class=\"mb-4\">Farklı uygulamalar yaş hesaplamasına farklı yaklaşımlar gerektirir:</p>      <ol class=\"list-decimal pl-6 mb-6\">          <li class=\"mb-2\">Standart Yaş Hesap Makinesi: Doğum tarihinden cari tarihe kadar yıllar, aylar ve günler hesaplar</li>          <li class=\"mb-2\">Yaş Farkı Hesap Makinesi: Herhangi iki tarih arasında geçen süreyi ölçer</li>          <li class=\"mb-2\">Doğum Tarihi Hesap Makinesi: Doğum yılını belirlemek için yaştan geriye doğru çalışıyor</li>          <li class=\"mb-2\">Gelecek Tarih Yaşı Hesap Makinesi: YAŞLI BİR GELECE TARİHİNDE YAŞI</li>          <li class=\"mb-2\">Ondalık Yaş Hesap Makinesi: Yaşları yıllar/ay/gün yerine ondalık sayı olarak ifade eder</li>          <li class=\"mb-2\">Tam Yaş Hesap Makinesi: Sıçrama Yılları Hesapları ve Hassasiyet için Değişen Ay Uzunları</li>      </ol>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Geliştiriciler için çekirdek yaş hesaplama formülleri</h2>        <h3 class=\"text-xl font-semibold mb-4\">JavaScript'te temel yaş hesaplaması</h3>      <p class=\"mb-4\">Çağın hesaplanmasına yönelik temel yaklaşım, iki tarih arasındaki farkın belirlenmesini içerir.İşte basit bir JavaScript yaş hesap makinesi uygulaması:</p>          <pre><code class=\"language-javascript\">  function calculateAge(birthDate) {      const today = new Date();      const birth = new Date(birthDate);      let yearsDiff = today.getFullYear() - birth.getFullYear();      let monthsDiff = today.getMonth() - birth.getMonth();      let daysDiff = today.getDate() - birth.getDate();      // Adjust for negative months or days      if (daysDiff < 0) {          monthsDiff--;          // Get days in previous month          const previousMonth = new Date(today.getFullYear(), today.getMonth(), 0);          daysDiff += previousMonth.getDate();      }      if (monthsDiff < 0) {          yearsDiff--;          monthsDiff += 12;      }      return {          years: yearsDiff,          months: monthsDiff,          days: daysDiff      };  }</code></pre>      <p class=\"mb-4\">Bu işlev, \"Kaç yaşındayım\" sorguları için temel hesaplamayı işler, ancak geliştiriciler, atlama yılları ve değişen ay uzunlukları gibi kenar vakalarının kesin bir yaş hesap makinesi için ek dikkate alındığının farkında olmalıdır.</p>        <h3 class=\"text-xl font-semibold mb-4\">Sıçrama Yılları ve Ay Varyasyonları Muhasebesi</h3>      <p class=\"mb-4\">Kesin yaş hesaplaması için, özellikle doğruluğun (sağlık veya yasal yazılım gibi) önemli olduğu uygulamalarda, SPEAP yıllarını hesaba katmak çok önemlidir:</p>          <pre><code class=\"language-javascript\">  function isLeapYear(year) {      return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);  }    function getDaysInMonth(year, month) {      // Month is 0-indexed in JavaScript Date      return new Date(year, month + 1, 0).getDate();  }</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">İki özel tarih arasındaki yaş farkı</h3>      <p class=\"mb-4\">Her iki tarihle çalışan bir yaş farkı hesap makinesi için:</p>          <pre><code class=\"language-javascript\">  function calculateDateDifference(startDate, endDate) {      const start = new Date(startDate);      const end = new Date(endDate);            if (end < start) {          // Swap dates if end is before start          [start, end] = [end, start];      }            let years = end.getFullYear() - start.getFullYear();      let months = end.getMonth() - start.getMonth();      let days = end.getDate() - start.getDate();            // Adjust for negative values      if (days < 0) {          months--;          days += getDaysInMonth(end.getFullYear(), end.getMonth() - 1);      }            if (months < 0) {          years--;          months += 12;      }            return { years, months, days };  }</code></pre>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Kullanıcı dostu bir yaş hesap makinesi web uygulaması uygulamak</h2>        <div class=\"my-8 flex justify-center\">          <img loading=\"lazy\" width=\"1200\" height=\"1200\"              src=\"https://cdn.statically.io/gh/quanna1210/calculators.im-content/refs/heads/master/upload/image/23/image-1.jpg\"              alt=\"Age Calculator Interface\" class=\"rounded-lg shadow-lg max-w-full h-auto\" />      </div>        <h3 class=\"text-xl font-semibold mb-4\">Bir yaş hesap makinesi için HTML yapısı</h3>      <p class=\"mb-4\">Herhangi bir çevrimiçi yaş hesap makinesinin temeli erişilebilir, sezgisel bir HTML yapısı ile başlar:</p>               <pre><code class=\"language-html\">  &lt;div class=\"age-calculator-container\"&gt;      &lt;h2&gt;Age Calculator&lt;/h2&gt;      &lt;div class=\"input-section\"&gt;          &lt;div class=\"date-input\"&gt;              &lt;label for=\"birth-date\"&gt;Date of Birth:&lt;/label&gt;              &lt;input type=\"date\" id=\"birth-date\" name=\"birth-date\"&gt;          &lt;/div&gt;          &lt;div class=\"date-input optional\"&gt;              &lt;label for=\"calculation-date\"&gt;Calculate Age on Date (optional):&lt;/label&gt;              &lt;input type=\"date\" id=\"calculation-date\" name=\"calculation-date\"&gt;          &lt;/div&gt;          &lt;button id=\"calculate-btn\"&gt;Calculate Age&lt;/button&gt;      &lt;/div&gt;      &lt;div class=\"results-section\"&gt;          &lt;div id=\"age-result\"&gt;&lt;/div&gt;          &lt;div id=\"next-birthday\"&gt;&lt;/div&gt;      &lt;/div&gt;  &lt;/div&gt;</code></pre>      <p class=\"mb-4\">Bu yapı, kullanıcıların bir doğum tarihi girmesine ve isteğe bağlı olarak yaş hesaplaması için bir referans tarihi belirlemesine olanak tanıyan bir doğum günü hesap makinesi için temel sağlar.</p>        <h3 class=\"text-xl font-semibold mb-4\">Daha iyi kullanıcı deneyimi için yaş hesap makinenizi şekillendirme</h3>      <p class=\"mb-4\">Duyarlı bir yaş hesap makinesi oluşturmak, düşünceli CSS uygulaması gerektirir:</p>               <pre><code class=\"language-css\">  .age-calculator-container {      max-width: 600px;      margin: 0 auto;      padding: 20px;      border-radius: 8px;      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);  }  .input-section {      display: flex;      flex-direction: column;      gap: 16px;      margin-bottom: 24px;  }  .date-input {      display: flex;      flex-direction: column;      gap: 8px;  }  input[type=\"date\"] {      padding: 10px;      border: 1px solid #ddd;      border-radius: 4px;      font-size: 16px;  }  button#calculate-btn {      padding: 12px 16px;      background-color: #4285f4;      color: white;      border: none;      border-radius: 4px;      cursor: pointer;      font-size: 16px;      transition: background-color 0.2s;  }  button#calculate-btn:hover {      background-color: #3367d6;  }  .results-section {      margin-top: 24px;      padding: 16px;      background-color: #f9f9f9;      border-radius: 4px;  }  /* Responsive adjustments */  @media (max-width: 480px) {      .age-calculator-container {          padding: 15px;      }            input[type=\"date\"] {          padding: 8px;      }  }</code></pre>      <p class=\"mb-4\">Bu stiller, yaş hesap makinesi web uygulamanızın farklı cihaz boyutlarında kullanıcı dostu ve erişilebilir kalmasını sağlar ve mobil yaş hesap makinesi kullanıcılarının ihtiyaçlarını giderir.</p>        <h3 class=\"text-xl font-semibold mb-4\">Tam işlevsellik için JavaScript uygulaması</h3>      <div class=\"my-8 flex justify-center\">          <img loading=\"lazy\" width=\"1200\" height=\"1200\"              src=\"https://cdn.statically.io/gh/quanna1210/calculators.im-content/refs/heads/master/upload/image/23/image-2.jpg\"              alt=\"Code Visualization\" class=\"rounded-lg shadow-lg max-w-full h-auto\" />      </div>      <p class=\"mb-4\">Özel bir yaş hesap makinesi için tam JavaScript, önceki hesaplama işlevlerimizi olay işleyicileriyle birleştirir:</p>               <pre><code class=\"language-javascript\">  document.addEventListener('DOMContentLoaded', () => {      const birthDateInput = document.getElementById('birth-date');      const calculationDateInput = document.getElementById('calculation-date');      const calculateBtn = document.getElementById('calculate-btn');      const ageResult = document.getElementById('age-result');      const nextBirthdayResult = document.getElementById('next-birthday');            // Set default max date to today      birthDateInput.max = new Date().toISOString().split('T')[0];      calculateBtn.addEventListener('click', () => {          if (!birthDateInput.value) {              ageResult.innerHTML = '&lt;p class=\"error\"&gt;Please enter a date of birth.&lt;/p&gt;';              return;          }          const birthDate = new Date(birthDateInput.value);          let referenceDate = new Date();                    if (calculationDateInput.value) {              referenceDate = new Date(calculationDateInput.value);          }          // Calculate age          const age = calculatePreciseAge(birthDate, referenceDate);          // Display result          ageResult.innerHTML = `              &lt;h3&gt;Age Result:&lt;/h3&gt;              &lt;p class=\"age-display\"&gt;${age.years} years, ${age.months} months, and ${age.days} days&lt;/p&gt;              &lt;p class=\"age-in-days\"&gt;Total: ${age.totalDays} days&lt;/p&gt;          `;          // Calculate and display next birthday          const nextBirthday = calculateNextBirthday(birthDate, referenceDate);          nextBirthdayResult.innerHTML = `              &lt;h3&gt;Next Birthday:&lt;/h3&gt;              &lt;p&gt;Your next birthday is in ${nextBirthday.months} months and ${nextBirthday.days} days.&lt;/p&gt;          `;      });      function calculatePreciseAge(birthDate, currentDate) {          let years = currentDate.getFullYear() - birthDate.getFullYear();          let months = currentDate.getMonth() - birthDate.getMonth();          let days = currentDate.getDate() - birthDate.getDate();          let totalDays = Math.floor((currentDate - birthDate) / (1000 * 60 * 60 * 24));          // Adjust for negative days          if (days < 0) {              months--;              // Get days in the previous month              const prevMonthDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0);              days += prevMonthDate.getDate();          }          // Adjust for negative months          if (months < 0) {              years--;              months += 12;          }          return { years, months, days, totalDays };      }            function calculateNextBirthday(birthDate, currentDate) {          const nextBirthday = new Date(currentDate.getFullYear(), birthDate.getMonth(), birthDate.getDate());          // If birthday has passed this year, calculate for next year          if (nextBirthday < currentDate) {              nextBirthday.setFullYear(nextBirthday.getFullYear() + 1);          }          const diffTime = nextBirthday - currentDate;          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));          const months = Math.floor(diffDays / 30);          const days = diffDays % 30;                    return { months, days };      }  });</code></pre>      <p class=\"mb-4\">Bu uygulama, kullanıcılara sadece \"kaç yaşındayım\" demeyi değil, aynı zamanda bir sonraki doğum günleri hakkında ek bilgiler sağlayan kapsamlı bir yaş hesap makinesi oluşturur.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Geliştiriciler için gelişmiş yaş hesap makinesi özellikleri</h2>        <h3 class=\"text-xl font-semibold mb-4\">Formlarda yaş doğrulamasının uygulanması</h3>      <div class=\"my-8 flex justify-center\">          <img loading=\"lazy\" width=\"1200\" height=\"1200\"              src=\"https://cdn.statically.io/gh/quanna1210/calculators.im-content/refs/heads/master/upload/image/23/image-3.jpg\"              alt=\"Age Validation Flowchart\" class=\"rounded-lg shadow-lg max-w-full h-auto\" />      </div>      <p class=\"mb-4\">Bir yaş hesap makinesi işlevi için ortak kullanım durumu, kayıt formlarında kullanıcı yaşını doğrulamaktır:</p>               <pre><code class=\"language-javascript\">  function validateMinimumAge(birthDateString, minimumAge) {      const birthDate = new Date(birthDateString);      const today = new Date();            // Calculate age      let age = today.getFullYear() - birthDate.getFullYear();      const monthDifference = today.getMonth() - birthDate.getMonth();            // Adjust age if birthday hasn't occurred yet this year      if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < birthDate.getDate())) {          age--;      }            return age >= minimumAge;  }    // Example usage in a form  const registrationForm = document.getElementById('registration-form');  registrationForm.addEventListener('submit', (e) => {      const birthDate = document.getElementById('birth-date').value;      if (!validateMinimumAge(birthDate, 18)) {          e.preventDefault();          alert('You must be at least 18 years old to register.');      }  });</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">Zaman Bölgesi Farkında Bir Yaş Hesap Makinesi Oluşturma</h3>      <p class=\"mb-4\">Global kullanıcılarla yapılan uygulamalar için zaman dilimlerini hesaba katmak çok önemlidir:</p>               <pre><code class=\"language-javascript\">  function calculateAgeWithTimeZone(birthDateString, timeZone) {      // Get current date in specified time zone      const options = { timeZone, year: 'numeric', month: 'numeric', day: 'numeric' };      const formatter = new Intl.DateTimeFormat('en-US', options);      const currentDateParts = formatter.formatToParts(new Date());            // Extract year, month, day from formatted parts      const currentDateObj = currentDateParts.reduce((acc, part) => {          if (part.type === 'year' || part.type === 'month' || part.type === 'day') {              acc[part.type] = parseInt(part.value);          }          return acc;      }, {});            // Adjust month (JavaScript months are 0-indexed)      currentDateObj.month -= 1;            const currentDate = new Date(currentDateObj.year, currentDateObj.month, currentDateObj.day);      const birthDate = new Date(birthDateString);            // Calculate age using the time-zone adjusted current date      return calculatePreciseAge(birthDate, currentDate);  }</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">Bir Yaş Hesap Makinesi API'sı oluşturma</h3>      <p class=\"mb-4\">Bir hizmet olarak yaş hesaplaması sağlamak isteyen geliştiriciler için, Node.js kullanarak bir yaş hesap makinesi API'si oluşturmak basittir:</p>               <pre><code class=\"language-javascript\">  // Using Express.js  const express = require('express');  const app = express();  app.use(express.json());    app.post('/api/calculate-age', (req, res) => {      try {          const { birthDate, referenceDate } = req.body;                    if (!birthDate) {              return res.status(400).json({ error: 'Birth date is required' });          }                    const birthDateObj = new Date(birthDate);          const referenceDateObj = referenceDate ? new Date(referenceDate) : new Date();                    // Validate dates          if (isNaN(birthDateObj.getTime())) {              return res.status(400).json({ error: 'Invalid birth date format' });          }                    if (isNaN(referenceDateObj.getTime())) {              return res.status(400).json({ error: 'Invalid reference date format' });          }                    // Calculate age          const age = calculatePreciseAge(birthDateObj, referenceDateObj);                    res.json({ age });      } catch (error) {          res.status(500).json({ error: 'Server error calculating age' });      }  });    app.listen(3000, () => {      console.log('Age calculator API running on port 3000');  });</code></pre>      <p class=\"mb-4\">Bu API, birden çok uygulamaya entegre edilebilen bir geliştirici yaş hesap makinesi hizmeti için bir temel sağlar.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Yaş Hesap Makinesi Uygulaması için En İyi Uygulamalar</h2>        <h3 class=\"text-xl font-semibold mb-4\">Yaş hesap makinesi araçlarında erişilebilirliği sağlamak</h3>      <p class=\"mb-4\">Bir yaş hesap makinesi web sitesi veya aracı geliştirirken, erişilebilirlik bir öncelik olmalıdır:</p>      <ol class=\"list-decimal pl-6 mb-6\">          <li class=\"mb-2\">Klavye Gezinme: Tüm girişlere ve düğmelere klavye üzerinden erişilebildiğinden emin olun</li>          <li class=\"mb-2\">Ekran Okuyucu Uyumluluğu: Uygun ARIA etiketlerini ve semantik HTML'yi kullanın</li>          <li class=\"mb-2\">Yüksek Kontrast Seçenekleri: Daha iyi okunabilirlik için yeterli renk kontrastı sağlayın</li>          <li class=\"mb-2\">Hata mesajlarını temizleyin: Giriş hatalarını açıkça belirtin</li>          <li class=\"mb-2\">Çoklu Giriş Biçimi: Mümkün olduğunda farklı tarih giriş formatlarına izin verin</li>      </ol>               <pre><code class=\"language-html\">  &lt;!-- Accessible date input example --&gt;  &lt;div class=\"date-input\"&gt;      &lt;label for=\"birth-date\" id=\"birth-date-label\"&gt;Date of Birth:&lt;/label&gt;      &lt;input           type=\"date\"           id=\"birth-date\"           name=\"birth-date\"          aria-labelledby=\"birth-date-label\"          aria-describedby=\"birth-date-format\"      &gt;      &lt;span id=\"birth-date-format\" class=\"visually-hidden\"&gt;          Please enter date in format MM/DD/YYYY      &lt;/span&gt;  &lt;/div&gt;</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">Yaş hesap makineleri için performans optimizasyonu</h3>      <p class=\"mb-4\">Yaş hesap makineleri gibi basit araçlar bile performans için optimize edilmelidir:</p>      <ol class=\"list-decimal pl-6 mb-6\">          <li class=\"mb-2\">DOM manipülasyonlarını en aza indirin: önbellek DOM öğelerini ve verimli bir şekilde güncelleme</li>          <li class=\"mb-2\">Debounce Hesaplamaları: Gerçek zamanlı yaş hesap makineleri için debouncing uygulayın</li>          <li class=\"mb-2\">Verimli tarih kütüphaneleri kullanın: Karmaşık hesaplamalar için hafif tarih manipülasyon kütüphanelerini göz önünde bulundurun</li>          <li class=\"mb-2\">Önbellek Önceki Hesaplamalar: Yeniden hesaplamayı önlemek için son sonuçları saklayın</li>      </ol>               <pre><code class=\"language-javascript\">  // Implementing debounce for real-time age calculation  function debounce(func, wait) {      let timeout;      return function() {          const context = this;          const args = arguments;          clearTimeout(timeout);          timeout = setTimeout(() => func.apply(context, args), wait);      };  }    const debouncedCalculate = debounce(() => {      // Age calculation logic      calculateAndDisplayAge();  }, 300);    birthDateInput.addEventListener('input', debouncedCalculate);</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">Yaş hesap makineleri için güvenlik hususları</h3>      <p class=\"mb-4\">Yaş hesap makineleri basit araçlar gibi görünse de, güvenlik önemlidir:</p>      <ol class=\"list-decimal pl-6 mb-6\">          <li class=\"mb-2\">Giriş Doğrulaması: XSS saldırılarını önlemek için her zaman tarih girişlerini sterilize edin</li>          <li class=\"mb-2\">Hassas bilgileri ortaya çıkarmaktan kaçının: Hangi bilgilerin iade edildiğine dikkat edin</li>          <li class=\"mb-2\">Oran Sınırlama: Yaş Hesap Makinesi API'leri için Oranı Sınırlama Uygulama</li>          <li class=\"mb-2\">İstemci tarafı ve sunucu tarafı doğrulama: Her ikisini de kritik yaş doğrulamaları için kullanın</li>      </ol>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Üçüncü taraf yaş hesap makinesi kütüphanelerini entegre etmek</h2>        <h3 class=\"text-xl font-semibold mb-4\">Yaş hesaplaması için popüler JavaScript kütüphaneleri</h3>      <p class=\"mb-4\">Birkaç kütüphane yaş hesap makinesi uygulamalarını basitleştirebilir:</p>      <ol class=\"list-decimal pl-6 mb-6\">          <li class=\"mb-2\">Moment.js: Kapsamlı bir tarih manipülasyon kütüphanesi</li>      </ol>               <pre><code class=\"language-javascript\">  const moment = require('moment');    function calculateAge(birthdate) {      const today = moment();      const birthDate = moment(birthdate);            const years = today.diff(birthDate, 'years');      birthDate.add(years, 'years');            const months = today.diff(birthDate, 'months');      birthDate.add(months, 'months');            const days = today.diff(birthDate, 'days');            return { years, months, days };  }</code></pre>        <ol class=\"list-decimal pl-6 mb-6\" start=\"2\">          <li class=\"mb-2\">Tarih-FN'ler: Ağaç sallama desteği ile modern bir alternatif</li>      </ol>               <pre><code class=\"language-javascript\">  import { differenceInYears, differenceInMonths, differenceInDays } from 'date-fns';    function calculateAge(birthdate) {      const today = new Date();      const birthDate = new Date(birthdate);            const years = differenceInYears(today, birthDate);      const months = differenceInMonths(today, birthDate) % 12;      const days = differenceInDays(today, birthDate) % 30; // Approximation            return { years, months, days };  }</code></pre>        <ol class=\"list-decimal pl-6 mb-6\" start=\"3\">          <li class=\"mb-2\">Luxon: Değişmezliğe odaklanan güçlü bir kütüphane</li>      </ol>               <pre><code class=\"language-script\">  const { DateTime } = require('luxon');    function calculateAge(birthdate) {      const today = DateTime.local();      const birthDate = DateTime.fromISO(birthdate);            const diff = today.diff(birthDate, ['years', 'months', 'days']).toObject();            return {          years: Math.floor(diff.years),          months: Math.floor(diff.months),          days: Math.floor(diff.days)      };  }</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">Üçüncü Taraf Kütüphaneleri ne zaman ve Özel Uygulama</h3>      <p class=\"mb-4\">Özel kod ve kütüphaneler arasında karar verirken bu faktörleri göz önünde bulundurun:</p>      <table class=\"w-full border-collapse mb-6\">          <thead>              <tr class=\"bg-gray-100\">                  <th class=\"border border-gray-300 p-2 text-left\">Faktör</th>                  <th class=\"border border-gray-300 p-2 text-left\">Özel Uygulama</th>                  <th class=\"border border-gray-300 p-2 text-left\">Üçüncü taraf kütüphane</th>              </tr>          </thead>          <tbody>              <tr>                  <td class=\"border border-gray-300 p-2\">Paket boyutu</td>                  <td class=\"border border-gray-300 p-2\">Uygulama basitse daha küçük</td>                  <td class=\"border border-gray-300 p-2\">Daha büyük, özellikle tam kütüphaneler için</td>              </tr>              <tr>                  <td class=\"border border-gray-300 p-2\">Bakım</td>                  <td class=\"border border-gray-300 p-2\">Daha yüksek (kodu koruyorsunuz)</td>                  <td class=\"border border-gray-300 p-2\">Daha düşük (topluluğa göre korunur)</td>              </tr>              <tr>                  <td class=\"border border-gray-300 p-2\">Özelleştirme</td>                  <td class=\"border border-gray-300 p-2\">Tam kontrol</td>                  <td class=\"border border-gray-300 p-2\">Kütüphane API ile sınırlı</td>              </tr>              <tr>                  <td class=\"border border-gray-300 p-2\">Edge Case Taşıma</td>                  <td class=\"border border-gray-300 p-2\">Dikkatli bir uygulama gerektirir</td>                  <td class=\"border border-gray-300 p-2\">Genellikle iyi test edilmiş</td>              </tr>              <tr>                  <td class=\"border border-gray-300 p-2\">Öğrenme eğrisi</td>                  <td class=\"border border-gray-300 p-2\">Tanıdık dil özelliklerini kullanır</td>                  <td class=\"border border-gray-300 p-2\">Kütüphane API'sını Öğrenmeyi gerektirir</td>              </tr>          </tbody>      </table>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Yaş Hesap Makinesi Uygulamanızı Test Etme</h2>        <h3 class=\"text-xl font-semibold mb-4\">Birim Testi Yaş Hesap Makinesi Fonksiyonları</h3>      <p class=\"mb-4\">Kapsamlı test, yaş hesap makinenizin doğruluğunu sağlar:</p>               <pre><code class=\"language-script\">  // Using Jest for testing  describe('Age Calculator Functions', () => {      test('Basic age calculation with birthdate in the past', () => {          // Mock current date to 2023-05-15          const mockDate = new Date(2023, 4, 15);          global.Date = jest.fn(() => mockDate);                    const birthDate = new Date(1990, 2, 10); // March 10, 1990          const age = calculateAge(birthDate);                    expect(age.years).toBe(33);          expect(age.months).toBe(2);          expect(age.days).toBe(5);      });            test('Age calculation with future reference date', () => {          const birthDate = new Date(2000, 0, 1); // January 1, 2000          const referenceDate = new Date(2030, 6, 15); // July 15, 2030                    const age = calculateAgeBetweenDates(birthDate, referenceDate);                    expect(age.years).toBe(30);          expect(age.months).toBe(6);          expect(age.days).toBe(14);      });            test('Edge case: Birth date is February 29 on leap year', () => {          const birthDate = new Date(2000, 1, 29); // February 29, 2000          const referenceDate = new Date(2023, 2, 1); // March 1, 2023                    const age = calculateAgeBetweenDates(birthDate, referenceDate);                    expect(age.years).toBe(23);          expect(age.months).toBe(0);          expect(age.days).toBe(1);      });  });</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">Tarayıcı Uyumluluk Testi</h3>      <p class=\"mb-4\">Yaş hesap makinenizin tüm büyük tarayıcılarda çalıştığından emin olun:</p>      <ol class=\"list-decimal pl-6 mb-6\">          <li class=\"mb-2\">Özellik Algılama: Tarayıcı Tespiti yerine Özellik Algılama Kullanın</li>          <li class=\"mb-2\"><strong>Input type fallbacks</strong>: Provide fallbacks for browsers that don't support              <code>input[type=\"date\"]</code>          </li>          <li class=\"mb-2\">Polyfills: Eski tarayıcılar için gerekli çoklu dolguları ekleyin</li>          <li class=\"mb-2\">Çapraz tarayıcı test araçları: Test için Browserstack veya Sos Laboratuarları gibi araçları kullanın</li>      </ol>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Gerçek Dünya Yaş Hesap Makinesi Uygulama Örnekleri</h2>      <div class=\"my-8 flex justify-center\">          <img loading=\"lazy\" width=\"1200\" height=\"1200\"              src=\"https://cdn.statically.io/gh/quanna1210/calculators.im-content/refs/heads/master/upload/image/23/image-4.jpg\"              alt=\"Cross-Platform Age Calculator\" class=\"rounded-lg shadow-lg max-w-full h-auto\" />      </div>        <h3 class=\"text-xl font-semibold mb-4\">Vaka çalışması: Sağlık Kayıt Sistemi</h3>      <p class=\"mb-4\">Bir sağlık uygulaması, hasta kaydı için yaş hesaplaması uygulayabilir:</p>               <pre><code class=\"language-javascript\">  function calculatePatientAgeDetails(dateOfBirth) {      const age = calculatePreciseAge(new Date(dateOfBirth), new Date());            // Determine age category for medical protocols      let ageCategory;      if (age.years < 2) {          ageCategory = 'infant';      } else if (age.years < 13) {          ageCategory = 'child';      } else if (age.years < 18) {          ageCategory = 'adolescent';      } else if (age.years < 65) {          ageCategory = 'adult';      } else {          ageCategory = 'senior';      }            // Calculate age in months for young children      const totalMonths = age.years * 12 + age.months;            return {          ...age,          ageCategory,          totalMonths,          // Include whether special protocols apply          requiresPediatricProtocol: age.years < 18,          requiresGeriatricProtocol: age.years >= 65      };  }</code></pre>        <h3 class=\"text-xl font-semibold mb-4\">Vaka çalışması: Yaş kısıtlı e-ticaret sitesi</h3>      <p class=\"mb-4\">Yaş kısıtlı ürünler satan bir e-ticaret sitesi uygulayabilir:</p>               <pre><code class=\"language-javascript\">  function verifyPurchaseEligibility(dateOfBirth, productMinimumAge) {      const today = new Date();      const birthDate = new Date(dateOfBirth);            // Calculate age as of today      let age = today.getFullYear() - birthDate.getFullYear();            // Adjust age if birthday hasn't occurred yet this year      if (          today.getMonth() < birthDate.getMonth() ||           (today.getMonth() === birthDate.getMonth() && today.getDate() < birthDate.getDate())      ) {          age--;      }            return {          eligible: age >= productMinimumAge,          currentAge: age,          minimumAge: productMinimumAge,          // Calculate days until eligibility if not eligible          daysUntilEligible: age < productMinimumAge ?               calculateDaysUntilEligible(birthDate, productMinimumAge) : 0      };  }    function calculateDaysUntilEligible(birthDate, requiredAge) {      const today = new Date();      const eligibilityDate = new Date(birthDate);            eligibilityDate.setFullYear(birthDate.getFullYear() + requiredAge);            // If eligibility date has passed this year, calculate for next year      if (eligibilityDate < today) {          return 0;      }            const diffTime = Math.abs(eligibilityDate - today);      return Math.ceil(diffTime / (1000 * 60 * 60 * 24));  }</code></pre>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Sonuç: Başvurunuz için en iyi yaş hesap makinesini oluşturmak</h2>      <p class=\"mb-4\">Etkili bir yaş hesap makinesi web uygulaması oluşturmak, kullanıcı ihtiyaçları, hesaplama doğruluğu ve daha geniş uygulama hedeflerinizle entegrasyonu dikkatle dikkate almayı gerektirir.Odaklanarak:</p>      <ol class=\"list-decimal pl-6 mb-6\">          <li class=\"mb-2\">Sıçrama yıllarını ve değişen ay uzunluklarını açıklayan kesin hesaplama formülleri</li>          <li class=\"mb-2\">Cihazlar arasında çalışan kullanıcı dostu arayüzler</li>          <li class=\"mb-2\">Aracınızı herkes tarafından kullanılabilir hale getiren erişilebilirlik özellikleri</li>          <li class=\"mb-2\">Yumuşak çalışma için performans optimizasyonu</li>          <li class=\"mb-2\">Edge vakalarını yakalamak için kapsamlı testler</li>      </ol>      <p class=\"mb-4\">Web uygulamanızın değerli bir bileşeni olarak öne çıkan bir yaş hesap makinesi uygulayabilirsiniz.</p>      <p class=\"mb-4\">En iyi yaş hesap makinesinin, doğru sonuçlar ve mükemmel bir kullanıcı deneyimi sağlarken özel kullanım durumunuza hizmet eden bir hesap makinesinin olduğunu unutmayın.İster özel uygulamayı tercih edin, ister mevcut kütüphanelerden yararlanın, bu kılavuzda ele alınan ilkeler, geliştirme ihtiyaçlarınızı karşılayan sağlam bir çözüm oluşturmanıza yardımcı olacaktır.</p>  </section>    <section class=\"mb-8\">      <h2 class=\"text-3xl font-bold mb-4\">Yaş Hesap Makinesi Geliştirme Kaynakları</h2>      <ul class=\"list-disc pl-6 mb-6\">          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\" title=\"MDN Web Dokümanlar: Tarih Nesnesi\" target=\"_blank\" rel=\"nofollow\">MDN Web Dokümanlar: Tarih Nesnesi</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" title=\"Intl.DateTimeFormat API\" target=\"_blank\" rel=\"nofollow\">Intl.DateTimeFormat API</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://www.w3.org/WAI/standards-guidelines/wcag/\" title=\"WCAG Erişilebilirlik Yönergeleri\" target=\"_blank\" rel=\"nofollow\">WCAG Erişilebilirlik Yönergeleri</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://github.com/topics/age-calculator\" title=\"Github Deposu: Yaş Hesap Makinesi Koleksiyonu\" target=\"_blank\" rel=\"nofollow\">Github Deposu: Yaş Hesap Makinesi Koleksiyonu</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://www.npmjs.com/package/date-fns\" title=\"NPM: Tarih-FNS Paketi\" target=\"_blank\" rel=\"nofollow\">NPM: Tarih-FNS Paketi</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://moment.github.io/luxon/\" title=\"Luxon belgeleri\" target=\"_blank\" rel=\"nofollow\">Luxon belgeleri</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://momentjs.com/docs/\" title=\"Moment.js belgeleri\" target=\"_blank\" rel=\"nofollow\">Moment.js belgeleri</a></li>          <li class=\"mb-2\"><a class=\"text-blue-600 hover:text-red-500 active:text-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transform active:scale-95 transition-transform duration-100\" href=\"https://jestjs.io/docs/getting-started\" title=\"Jest test çerçevesi\" target=\"_blank\" rel=\"nofollow\">Jest test çerçevesi</a></li>      </ul>  </section>"
}